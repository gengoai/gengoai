<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf8">
<!--[if IE]><meta http-equiv="X-UA-Compatible" content="IE=edge"><![endif]-->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 1.5.8">
<meta name="author" content="GengoAI">
<title>Mango User Guide</title>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700">
<style>
/* Asciidoctor default stylesheet | MIT License | http://asciidoctor.org */
/* Uncomment @import statement below to use as custom stylesheet */
/*@import "https://fonts.googleapis.com/css?family=Open+Sans:300,300italic,400,400italic,600,600italic%7CNoto+Serif:400,400italic,700,700italic%7CDroid+Sans+Mono:400,700";*/
article,aside,details,figcaption,figure,footer,header,hgroup,main,nav,section,summary{display:block}
audio,canvas,video{display:inline-block}
audio:not([controls]){display:none;height:0}
script{display:none!important}
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}
a{background:transparent}
a:focus{outline:thin dotted}
a:active,a:hover{outline:0}
h1{font-size:2em;margin:.67em 0}
abbr[title]{border-bottom:1px dotted}
b,strong{font-weight:bold}
dfn{font-style:italic}
hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}
mark{background:#ff0;color:#000}
code,kbd,pre,samp{font-family:monospace;font-size:1em}
pre{white-space:pre-wrap}
q{quotes:"\201C" "\201D" "\2018" "\2019"}
small{font-size:80%}
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}
sup{top:-.5em}
sub{bottom:-.25em}
img{border:0}
svg:not(:root){overflow:hidden}
figure{margin:0}
fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}
legend{border:0;padding:0}
button,input,select,textarea{font-family:inherit;font-size:100%;margin:0}
button,input{line-height:normal}
button,select{text-transform:none}
button,html input[type="button"],input[type="reset"],input[type="submit"]{-webkit-appearance:button;cursor:pointer}
button[disabled],html input[disabled]{cursor:default}
input[type="checkbox"],input[type="radio"]{box-sizing:border-box;padding:0}
button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}
textarea{overflow:auto;vertical-align:top}
table{border-collapse:collapse;border-spacing:0}
*,*::before,*::after{-moz-box-sizing:border-box;-webkit-box-sizing:border-box;box-sizing:border-box}
html,body{font-size:100%}
body{background:#fff;color:rgba(0,0,0,.8);padding:0;margin:0;font-family:"Noto Serif","DejaVu Serif",serif;font-weight:400;font-style:normal;line-height:1;position:relative;cursor:auto;tab-size:4;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased}
a:hover{cursor:pointer}
img,object,embed{max-width:100%;height:auto}
object,embed{height:100%}
img{-ms-interpolation-mode:bicubic}
.left{float:left!important}
.right{float:right!important}
.text-left{text-align:left!important}
.text-right{text-align:right!important}
.text-center{text-align:center!important}
.text-justify{text-align:justify!important}
.hide{display:none}
img,object,svg{display:inline-block;vertical-align:middle}
textarea{height:auto;min-height:50px}
select{width:100%}
.center{margin-left:auto;margin-right:auto}
.stretch{width:100%}
.subheader,.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{line-height:1.45;color:#7a2518;font-weight:400;margin-top:0;margin-bottom:.25em}
div,dl,dt,dd,ul,ol,li,h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6,pre,form,p,blockquote,th,td{margin:0;padding:0;direction:ltr}
a{color:#2156a5;text-decoration:underline;line-height:inherit}
a:hover,a:focus{color:#1d4b8f}
a img{border:none}
p{font-family:inherit;font-weight:400;font-size:1em;line-height:1.6;margin-bottom:1.25em;text-rendering:optimizeLegibility}
p aside{font-size:.875em;line-height:1.35;font-style:italic}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{font-family:"Open Sans","DejaVu Sans",sans-serif;font-weight:300;font-style:normal;color:#ba3925;text-rendering:optimizeLegibility;margin-top:1em;margin-bottom:.5em;line-height:1.0125em}
h1 small,h2 small,h3 small,#toctitle small,.sidebarblock>.content>.title small,h4 small,h5 small,h6 small{font-size:60%;color:#e99b8f;line-height:0}
h1{font-size:2.125em}
h2{font-size:1.6875em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.375em}
h4,h5{font-size:1.125em}
h6{font-size:1em}
hr{border:solid #dddddf;border-width:1px 0 0;clear:both;margin:1.25em 0 1.1875em;height:0}
em,i{font-style:italic;line-height:inherit}
strong,b{font-weight:bold;line-height:inherit}
small{font-size:60%;line-height:inherit}
code{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;color:rgba(0,0,0,.9)}
ul,ol,dl{font-size:1em;line-height:1.6;margin-bottom:1.25em;list-style-position:outside;font-family:inherit}
ul,ol{margin-left:1.5em}
ul li ul,ul li ol{margin-left:1.25em;margin-bottom:0;font-size:1em}
ul.square li ul,ul.circle li ul,ul.disc li ul{list-style:inherit}
ul.square{list-style-type:square}
ul.circle{list-style-type:circle}
ul.disc{list-style-type:disc}
ol li ul,ol li ol{margin-left:1.25em;margin-bottom:0}
dl dt{margin-bottom:.3125em;font-weight:bold}
dl dd{margin-bottom:1.25em}
abbr,acronym{text-transform:uppercase;font-size:90%;color:rgba(0,0,0,.8);border-bottom:1px dotted #ddd;cursor:help}
abbr{text-transform:none}
blockquote{margin:0 0 1.25em;padding:.5625em 1.25em 0 1.1875em;border-left:1px solid #ddd}
blockquote cite{display:block;font-size:.9375em;color:rgba(0,0,0,.6)}
blockquote cite::before{content:"\2014 \0020"}
blockquote cite a,blockquote cite a:visited{color:rgba(0,0,0,.6)}
blockquote,blockquote p{line-height:1.6;color:rgba(0,0,0,.85)}
@media screen and (min-width:768px){h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2}
h1{font-size:2.75em}
h2{font-size:2.3125em}
h3,#toctitle,.sidebarblock>.content>.title{font-size:1.6875em}
h4{font-size:1.4375em}}
table{background:#fff;margin-bottom:1.25em;border:solid 1px #dedede}
table thead,table tfoot{background:#f7f8f7}
table thead tr th,table thead tr td,table tfoot tr th,table tfoot tr td{padding:.5em .625em .625em;font-size:inherit;color:rgba(0,0,0,.8);text-align:left}
table tr th,table tr td{padding:.5625em .625em;font-size:inherit;color:rgba(0,0,0,.8)}
table tr.even,table tr.alt,table tr:nth-of-type(even){background:#f8f8f7}
table thead tr th,table tfoot tr th,table tbody tr td,table tr td,table tfoot tr td{display:table-cell;line-height:1.6}
h1,h2,h3,#toctitle,.sidebarblock>.content>.title,h4,h5,h6{line-height:1.2;word-spacing:-.05em}
h1 strong,h2 strong,h3 strong,#toctitle strong,.sidebarblock>.content>.title strong,h4 strong,h5 strong,h6 strong{font-weight:400}
.clearfix::before,.clearfix::after,.float-group::before,.float-group::after{content:" ";display:table}
.clearfix::after,.float-group::after{clear:both}
*:not(pre)>code{font-size:.9375em;font-style:normal!important;letter-spacing:0;padding:.1em .5ex;word-spacing:-.15em;background-color:#f7f7f8;-webkit-border-radius:4px;border-radius:4px;line-height:1.45;text-rendering:optimizeSpeed;word-wrap:break-word}
*:not(pre)>code.nobreak{word-wrap:normal}
*:not(pre)>code.nowrap{white-space:nowrap}
pre,pre>code{line-height:1.45;color:rgba(0,0,0,.9);font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;font-weight:400;text-rendering:optimizeSpeed}
em em{font-style:normal}
strong strong{font-weight:400}
.keyseq{color:rgba(51,51,51,.8)}
kbd{font-family:"Droid Sans Mono","DejaVu Sans Mono",monospace;display:inline-block;color:rgba(0,0,0,.8);font-size:.65em;line-height:1.45;background-color:#f7f7f7;border:1px solid #ccc;-webkit-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em white inset;box-shadow:0 1px 0 rgba(0,0,0,.2),0 0 0 .1em #fff inset;margin:0 .15em;padding:.2em .5em;vertical-align:middle;position:relative;top:-.1em;white-space:nowrap}
.keyseq kbd:first-child{margin-left:0}
.keyseq kbd:last-child{margin-right:0}
.menuseq,.menuref{color:#000}
.menuseq b:not(.caret),.menuref{font-weight:inherit}
.menuseq{word-spacing:-.02em}
.menuseq b.caret{font-size:1.25em;line-height:.8}
.menuseq i.caret{font-weight:bold;text-align:center;width:.45em}
b.button::before,b.button::after{position:relative;top:-1px;font-weight:400}
b.button::before{content:"[";padding:0 3px 0 2px}
b.button::after{content:"]";padding:0 2px 0 3px}
p a>code:hover{color:rgba(0,0,0,.9)}
#header,#content,#footnotes,#footer{width:100%;margin-left:auto;margin-right:auto;margin-top:0;margin-bottom:0;max-width:62.5em;*zoom:1;position:relative;padding-left:.9375em;padding-right:.9375em}
#header::before,#header::after,#content::before,#content::after,#footnotes::before,#footnotes::after,#footer::before,#footer::after{content:" ";display:table}
#header::after,#content::after,#footnotes::after,#footer::after{clear:both}
#content{margin-top:1.25em}
#content::before{content:none}
#header>h1:first-child{color:rgba(0,0,0,.85);margin-top:2.25rem;margin-bottom:0}
#header>h1:first-child+#toc{margin-top:8px;border-top:1px solid #dddddf}
#header>h1:only-child,body.toc2 #header>h1:nth-last-child(2){border-bottom:1px solid #dddddf;padding-bottom:8px}
#header .details{border-bottom:1px solid #dddddf;line-height:1.45;padding-top:.25em;padding-bottom:.25em;padding-left:.25em;color:rgba(0,0,0,.6);display:-ms-flexbox;display:-webkit-flex;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap}
#header .details span:first-child{margin-left:-.125em}
#header .details span.email a{color:rgba(0,0,0,.85)}
#header .details br{display:none}
#header .details br+span::before{content:"\00a0\2013\00a0"}
#header .details br+span.author::before{content:"\00a0\22c5\00a0";color:rgba(0,0,0,.85)}
#header .details br+span#revremark::before{content:"\00a0|\00a0"}
#header #revnumber{text-transform:capitalize}
#header #revnumber::after{content:"\00a0"}
#content>h1:first-child:not([class]){color:rgba(0,0,0,.85);border-bottom:1px solid #dddddf;padding-bottom:8px;margin-top:0;padding-top:1rem;margin-bottom:1.25rem}
#toc{border-bottom:1px solid #e7e7e9;padding-bottom:.5em}
#toc>ul{margin-left:.125em}
#toc ul.sectlevel0>li>a{font-style:italic}
#toc ul.sectlevel0 ul.sectlevel1{margin:.5em 0}
#toc ul{font-family:"Open Sans","DejaVu Sans",sans-serif;list-style-type:none}
#toc li{line-height:1.3334;margin-top:.3334em}
#toc a{text-decoration:none}
#toc a:active{text-decoration:underline}
#toctitle{color:#7a2518;font-size:1.2em}
@media screen and (min-width:768px){#toctitle{font-size:1.375em}
body.toc2{padding-left:15em;padding-right:0}
#toc.toc2{margin-top:0!important;background-color:#f8f8f7;position:fixed;width:15em;left:0;top:0;border-right:1px solid #e7e7e9;border-top-width:0!important;border-bottom-width:0!important;z-index:1000;padding:1.25em 1em;height:100%;overflow:auto}
#toc.toc2 #toctitle{margin-top:0;margin-bottom:.8rem;font-size:1.2em}
#toc.toc2>ul{font-size:.9em;margin-bottom:0}
#toc.toc2 ul ul{margin-left:0;padding-left:1em}
#toc.toc2 ul.sectlevel0 ul.sectlevel1{padding-left:0;margin-top:.5em;margin-bottom:.5em}
body.toc2.toc-right{padding-left:0;padding-right:15em}
body.toc2.toc-right #toc.toc2{border-right-width:0;border-left:1px solid #e7e7e9;left:auto;right:0}}
@media screen and (min-width:1280px){body.toc2{padding-left:20em;padding-right:0}
#toc.toc2{width:20em}
#toc.toc2 #toctitle{font-size:1.375em}
#toc.toc2>ul{font-size:.95em}
#toc.toc2 ul ul{padding-left:1.25em}
body.toc2.toc-right{padding-left:0;padding-right:20em}}
#content #toc{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
#content #toc>:first-child{margin-top:0}
#content #toc>:last-child{margin-bottom:0}
#footer{max-width:100%;background-color:rgba(0,0,0,.8);padding:1.25em}
#footer-text{color:rgba(255,255,255,.8);line-height:1.44}
#content{margin-bottom:.625em}
.sect1{padding-bottom:.625em}
@media screen and (min-width:768px){#content{margin-bottom:1.25em}
.sect1{padding-bottom:1.25em}}
.sect1:last-child{padding-bottom:0}
.sect1+.sect1{border-top:1px solid #e7e7e9}
#content h1>a.anchor,h2>a.anchor,h3>a.anchor,#toctitle>a.anchor,.sidebarblock>.content>.title>a.anchor,h4>a.anchor,h5>a.anchor,h6>a.anchor{position:absolute;z-index:1001;width:1.5ex;margin-left:-1.5ex;display:block;text-decoration:none!important;visibility:hidden;text-align:center;font-weight:400}
#content h1>a.anchor::before,h2>a.anchor::before,h3>a.anchor::before,#toctitle>a.anchor::before,.sidebarblock>.content>.title>a.anchor::before,h4>a.anchor::before,h5>a.anchor::before,h6>a.anchor::before{content:"\00A7";font-size:.85em;display:block;padding-top:.1em}
#content h1:hover>a.anchor,#content h1>a.anchor:hover,h2:hover>a.anchor,h2>a.anchor:hover,h3:hover>a.anchor,#toctitle:hover>a.anchor,.sidebarblock>.content>.title:hover>a.anchor,h3>a.anchor:hover,#toctitle>a.anchor:hover,.sidebarblock>.content>.title>a.anchor:hover,h4:hover>a.anchor,h4>a.anchor:hover,h5:hover>a.anchor,h5>a.anchor:hover,h6:hover>a.anchor,h6>a.anchor:hover{visibility:visible}
#content h1>a.link,h2>a.link,h3>a.link,#toctitle>a.link,.sidebarblock>.content>.title>a.link,h4>a.link,h5>a.link,h6>a.link{color:#ba3925;text-decoration:none}
#content h1>a.link:hover,h2>a.link:hover,h3>a.link:hover,#toctitle>a.link:hover,.sidebarblock>.content>.title>a.link:hover,h4>a.link:hover,h5>a.link:hover,h6>a.link:hover{color:#a53221}
.audioblock,.imageblock,.literalblock,.listingblock,.stemblock,.videoblock{margin-bottom:1.25em}
.admonitionblock td.content>.title,.audioblock>.title,.exampleblock>.title,.imageblock>.title,.listingblock>.title,.literalblock>.title,.stemblock>.title,.openblock>.title,.paragraph>.title,.quoteblock>.title,table.tableblock>.title,.verseblock>.title,.videoblock>.title,.dlist>.title,.olist>.title,.ulist>.title,.qlist>.title,.hdlist>.title{text-rendering:optimizeLegibility;text-align:left;font-family:"Noto Serif","DejaVu Serif",serif;font-size:1rem;font-style:italic}
table.tableblock.fit-content>caption.title{white-space:nowrap;width:0}
.paragraph.lead>p,#preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:1.21875em;line-height:1.6;color:rgba(0,0,0,.85)}
table.tableblock #preamble>.sectionbody>[class="paragraph"]:first-of-type p{font-size:inherit}
.admonitionblock>table{border-collapse:separate;border:0;background:none;width:100%}
.admonitionblock>table td.icon{text-align:center;width:80px}
.admonitionblock>table td.icon img{max-width:none}
.admonitionblock>table td.icon .title{font-weight:bold;font-family:"Open Sans","DejaVu Sans",sans-serif;text-transform:uppercase}
.admonitionblock>table td.content{padding-left:1.125em;padding-right:1.25em;border-left:1px solid #dddddf;color:rgba(0,0,0,.6)}
.admonitionblock>table td.content>:last-child>:last-child{margin-bottom:0}
.exampleblock>.content{border-style:solid;border-width:1px;border-color:#e6e6e6;margin-bottom:1.25em;padding:1.25em;background:#fff;-webkit-border-radius:4px;border-radius:4px}
.exampleblock>.content>:first-child{margin-top:0}
.exampleblock>.content>:last-child{margin-bottom:0}
.sidebarblock{border-style:solid;border-width:1px;border-color:#e0e0dc;margin-bottom:1.25em;padding:1.25em;background:#f8f8f7;-webkit-border-radius:4px;border-radius:4px}
.sidebarblock>:first-child{margin-top:0}
.sidebarblock>:last-child{margin-bottom:0}
.sidebarblock>.content>.title{color:#7a2518;margin-top:0;text-align:center}
.exampleblock>.content>:last-child>:last-child,.exampleblock>.content .olist>ol>li:last-child>:last-child,.exampleblock>.content .ulist>ul>li:last-child>:last-child,.exampleblock>.content .qlist>ol>li:last-child>:last-child,.sidebarblock>.content>:last-child>:last-child,.sidebarblock>.content .olist>ol>li:last-child>:last-child,.sidebarblock>.content .ulist>ul>li:last-child>:last-child,.sidebarblock>.content .qlist>ol>li:last-child>:last-child{margin-bottom:0}
.literalblock pre,.listingblock pre:not(.highlight),.listingblock pre[class="highlight"],.listingblock pre[class^="highlight "],.listingblock pre.CodeRay,.listingblock pre.prettyprint{background:#f7f7f8}
.sidebarblock .literalblock pre,.sidebarblock .listingblock pre:not(.highlight),.sidebarblock .listingblock pre[class="highlight"],.sidebarblock .listingblock pre[class^="highlight "],.sidebarblock .listingblock pre.CodeRay,.sidebarblock .listingblock pre.prettyprint{background:#f2f1f1}
.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{-webkit-border-radius:4px;border-radius:4px;word-wrap:break-word;overflow-x:auto;padding:1em;font-size:.8125em}
@media screen and (min-width:768px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:.90625em}}
@media screen and (min-width:1280px){.literalblock pre,.literalblock pre[class],.listingblock pre,.listingblock pre[class]{font-size:1em}}
.literalblock pre.nowrap,.literalblock pre.nowrap pre,.listingblock pre.nowrap,.listingblock pre.nowrap pre{white-space:pre;word-wrap:normal}
.literalblock.output pre{color:#f7f7f8;background-color:rgba(0,0,0,.9)}
.listingblock pre.highlightjs{padding:0}
.listingblock pre.highlightjs>code{padding:1em;-webkit-border-radius:4px;border-radius:4px}
.listingblock pre.prettyprint{border-width:0}
.listingblock>.content{position:relative}
.listingblock code[data-lang]::before{display:none;content:attr(data-lang);position:absolute;font-size:.75em;top:.425rem;right:.5rem;line-height:1;text-transform:uppercase;color:#999}
.listingblock:hover code[data-lang]::before{display:block}
.listingblock.terminal pre .command::before{content:attr(data-prompt);padding-right:.5em;color:#999}
.listingblock.terminal pre .command:not([data-prompt])::before{content:"$"}
table.pyhltable{border-collapse:separate;border:0;margin-bottom:0;background:none}
table.pyhltable td{vertical-align:top;padding-top:0;padding-bottom:0;line-height:1.45}
table.pyhltable td.code{padding-left:.75em;padding-right:0}
pre.pygments .lineno,table.pyhltable td:not(.code){color:#999;padding-left:0;padding-right:.5em;border-right:1px solid #dddddf}
pre.pygments .lineno{display:inline-block;margin-right:.25em}
table.pyhltable .linenodiv{background:none!important;padding-right:0!important}
.quoteblock{margin:0 1em 1.25em 1.5em;display:table}
.quoteblock>.title{margin-left:-1.5em;margin-bottom:.75em}
.quoteblock blockquote,.quoteblock p{color:rgba(0,0,0,.85);font-size:1.15rem;line-height:1.75;word-spacing:.1em;letter-spacing:0;font-style:italic;text-align:justify}
.quoteblock blockquote{margin:0;padding:0;border:0}
.quoteblock blockquote::before{content:"\201c";float:left;font-size:2.75em;font-weight:bold;line-height:.6em;margin-left:-.6em;color:#7a2518;text-shadow:0 1px 2px rgba(0,0,0,.1)}
.quoteblock blockquote>.paragraph:last-child p{margin-bottom:0}
.quoteblock .attribution{margin-top:.75em;margin-right:.5ex;text-align:right}
.verseblock{margin:0 1em 1.25em}
.verseblock pre{font-family:"Open Sans","DejaVu Sans",sans;font-size:1.15rem;color:rgba(0,0,0,.85);font-weight:300;text-rendering:optimizeLegibility}
.verseblock pre strong{font-weight:400}
.verseblock .attribution{margin-top:1.25rem;margin-left:.5ex}
.quoteblock .attribution,.verseblock .attribution{font-size:.9375em;line-height:1.45;font-style:italic}
.quoteblock .attribution br,.verseblock .attribution br{display:none}
.quoteblock .attribution cite,.verseblock .attribution cite{display:block;letter-spacing:-.025em;color:rgba(0,0,0,.6)}
.quoteblock.abstract blockquote::before,.quoteblock.excerpt blockquote::before,.quoteblock .quoteblock blockquote::before{display:none}
.quoteblock.abstract blockquote,.quoteblock.abstract p,.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{line-height:1.6;word-spacing:0}
.quoteblock.abstract{margin:0 1em 1.25em;display:block}
.quoteblock.abstract>.title{margin:0 0 .375em;font-size:1.15em;text-align:center}
.quoteblock.excerpt,.quoteblock .quoteblock{margin:0 0 1.25em;padding:0 0 .25em 1em;border-left:.25em solid #dddddf}
.quoteblock.excerpt blockquote,.quoteblock.excerpt p,.quoteblock .quoteblock blockquote,.quoteblock .quoteblock p{color:inherit;font-size:1.0625rem}
.quoteblock.excerpt .attribution,.quoteblock .quoteblock .attribution{color:inherit;text-align:left;margin-right:0}
table.tableblock{max-width:100%;border-collapse:separate}
p.tableblock:last-child{margin-bottom:0}
td.tableblock>.content{margin-bottom:-1.25em}
table.tableblock,th.tableblock,td.tableblock{border:0 solid #dedede}
table.grid-all>thead>tr>.tableblock,table.grid-all>tbody>tr>.tableblock{border-width:0 1px 1px 0}
table.grid-all>tfoot>tr>.tableblock{border-width:1px 1px 0 0}
table.grid-cols>*>tr>.tableblock{border-width:0 1px 0 0}
table.grid-rows>thead>tr>.tableblock,table.grid-rows>tbody>tr>.tableblock{border-width:0 0 1px}
table.grid-rows>tfoot>tr>.tableblock{border-width:1px 0 0}
table.grid-all>*>tr>.tableblock:last-child,table.grid-cols>*>tr>.tableblock:last-child{border-right-width:0}
table.grid-all>tbody>tr:last-child>.tableblock,table.grid-all>thead:last-child>tr>.tableblock,table.grid-rows>tbody>tr:last-child>.tableblock,table.grid-rows>thead:last-child>tr>.tableblock{border-bottom-width:0}
table.frame-all{border-width:1px}
table.frame-sides{border-width:0 1px}
table.frame-topbot,table.frame-ends{border-width:1px 0}
table.stripes-all tr,table.stripes-odd tr:nth-of-type(odd){background:#f8f8f7}
table.stripes-none tr,table.stripes-odd tr:nth-of-type(even){background:none}
th.halign-left,td.halign-left{text-align:left}
th.halign-right,td.halign-right{text-align:right}
th.halign-center,td.halign-center{text-align:center}
th.valign-top,td.valign-top{vertical-align:top}
th.valign-bottom,td.valign-bottom{vertical-align:bottom}
th.valign-middle,td.valign-middle{vertical-align:middle}
table thead th,table tfoot th{font-weight:bold}
tbody tr th{display:table-cell;line-height:1.6;background:#f7f8f7}
tbody tr th,tbody tr th p,tfoot tr th,tfoot tr th p{color:rgba(0,0,0,.8);font-weight:bold}
p.tableblock>code:only-child{background:none;padding:0}
p.tableblock{font-size:1em}
td>div.verse{white-space:pre}
ol{margin-left:1.75em}
ul li ol{margin-left:1.5em}
dl dd{margin-left:1.125em}
dl dd:last-child,dl dd:last-child>:last-child{margin-bottom:0}
ol>li p,ul>li p,ul dd,ol dd,.olist .olist,.ulist .ulist,.ulist .olist,.olist .ulist{margin-bottom:.625em}
ul.checklist,ul.none,ol.none,ul.no-bullet,ol.no-bullet,ol.unnumbered,ul.unstyled,ol.unstyled{list-style-type:none}
ul.no-bullet,ol.no-bullet,ol.unnumbered{margin-left:.625em}
ul.unstyled,ol.unstyled{margin-left:0}
ul.checklist{margin-left:.625em}
ul.checklist li>p:first-child>.fa-square-o:first-child,ul.checklist li>p:first-child>.fa-check-square-o:first-child{width:1.25em;font-size:.8em;position:relative;bottom:.125em}
ul.checklist li>p:first-child>input[type="checkbox"]:first-child{margin-right:.25em}
ul.inline{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-flow:row wrap;-webkit-flex-flow:row wrap;flex-flow:row wrap;list-style:none;margin:0 0 .625em -1.25em}
ul.inline>li{margin-left:1.25em}
.unstyled dl dt{font-weight:400;font-style:normal}
ol.arabic{list-style-type:decimal}
ol.decimal{list-style-type:decimal-leading-zero}
ol.loweralpha{list-style-type:lower-alpha}
ol.upperalpha{list-style-type:upper-alpha}
ol.lowerroman{list-style-type:lower-roman}
ol.upperroman{list-style-type:upper-roman}
ol.lowergreek{list-style-type:lower-greek}
.hdlist>table,.colist>table{border:0;background:none}
.hdlist>table>tbody>tr,.colist>table>tbody>tr{background:none}
td.hdlist1,td.hdlist2{vertical-align:top;padding:0 .625em}
td.hdlist1{font-weight:bold;padding-bottom:1.25em}
.literalblock+.colist,.listingblock+.colist{margin-top:-.5em}
.colist td:not([class]):first-child{padding:.4em .75em 0;line-height:1;vertical-align:top}
.colist td:not([class]):first-child img{max-width:none}
.colist td:not([class]):last-child{padding:.25em 0}
.thumb,.th{line-height:0;display:inline-block;border:solid 4px #fff;-webkit-box-shadow:0 0 0 1px #ddd;box-shadow:0 0 0 1px #ddd}
.imageblock.left{margin:.25em .625em 1.25em 0}
.imageblock.right{margin:.25em 0 1.25em .625em}
.imageblock>.title{margin-bottom:0}
.imageblock.thumb,.imageblock.th{border-width:6px}
.imageblock.thumb>.title,.imageblock.th>.title{padding:0 .125em}
.image.left,.image.right{margin-top:.25em;margin-bottom:.25em;display:inline-block;line-height:0}
.image.left{margin-right:.625em}
.image.right{margin-left:.625em}
a.image{text-decoration:none;display:inline-block}
a.image object{pointer-events:none}
sup.footnote,sup.footnoteref{font-size:.875em;position:static;vertical-align:super}
sup.footnote a,sup.footnoteref a{text-decoration:none}
sup.footnote a:active,sup.footnoteref a:active{text-decoration:underline}
#footnotes{padding-top:.75em;padding-bottom:.75em;margin-bottom:.625em}
#footnotes hr{width:20%;min-width:6.25em;margin:-.25em 0 .75em;border-width:1px 0 0}
#footnotes .footnote{padding:0 .375em 0 .225em;line-height:1.3334;font-size:.875em;margin-left:1.2em;margin-bottom:.2em}
#footnotes .footnote a:first-of-type{font-weight:bold;text-decoration:none;margin-left:-1.05em}
#footnotes .footnote:last-of-type{margin-bottom:0}
#content #footnotes{margin-top:-.625em;margin-bottom:0;padding:.75em 0}
.gist .file-data>table{border:0;background:#fff;width:100%;margin-bottom:0}
.gist .file-data>table td.line-data{width:99%}
div.unbreakable{page-break-inside:avoid}
.big{font-size:larger}
.small{font-size:smaller}
.underline{text-decoration:underline}
.overline{text-decoration:overline}
.line-through{text-decoration:line-through}
.aqua{color:#00bfbf}
.aqua-background{background-color:#00fafa}
.black{color:#000}
.black-background{background-color:#000}
.blue{color:#0000bf}
.blue-background{background-color:#0000fa}
.fuchsia{color:#bf00bf}
.fuchsia-background{background-color:#fa00fa}
.gray{color:#606060}
.gray-background{background-color:#7d7d7d}
.green{color:#006000}
.green-background{background-color:#007d00}
.lime{color:#00bf00}
.lime-background{background-color:#00fa00}
.maroon{color:#600000}
.maroon-background{background-color:#7d0000}
.navy{color:#000060}
.navy-background{background-color:#00007d}
.olive{color:#606000}
.olive-background{background-color:#7d7d00}
.purple{color:#600060}
.purple-background{background-color:#7d007d}
.red{color:#bf0000}
.red-background{background-color:#fa0000}
.silver{color:#909090}
.silver-background{background-color:#bcbcbc}
.teal{color:#006060}
.teal-background{background-color:#007d7d}
.white{color:#bfbfbf}
.white-background{background-color:#fafafa}
.yellow{color:#bfbf00}
.yellow-background{background-color:#fafa00}
span.icon>.fa{cursor:default}
a span.icon>.fa{cursor:inherit}
.admonitionblock td.icon [class^="fa icon-"]{font-size:2.5em;text-shadow:1px 1px 2px rgba(0,0,0,.5);cursor:default}
.admonitionblock td.icon .icon-note::before{content:"\f05a";color:#19407c}
.admonitionblock td.icon .icon-tip::before{content:"\f0eb";text-shadow:1px 1px 2px rgba(155,155,0,.8);color:#111}
.admonitionblock td.icon .icon-warning::before{content:"\f071";color:#bf6900}
.admonitionblock td.icon .icon-caution::before{content:"\f06d";color:#bf3400}
.admonitionblock td.icon .icon-important::before{content:"\f06a";color:#bf0000}
.conum[data-value]{display:inline-block;color:#fff!important;background-color:rgba(0,0,0,.8);-webkit-border-radius:100px;border-radius:100px;text-align:center;font-size:.75em;width:1.67em;height:1.67em;line-height:1.67em;font-family:"Open Sans","DejaVu Sans",sans-serif;font-style:normal;font-weight:bold}
.conum[data-value] *{color:#fff!important}
.conum[data-value]+b{display:none}
.conum[data-value]::after{content:attr(data-value)}
pre .conum[data-value]{position:relative;top:-.125em}
b.conum *{color:inherit!important}
.conum:not([data-value]):empty{display:none}
dt,th.tableblock,td.content,div.footnote{text-rendering:optimizeLegibility}
h1,h2,p,td.content,span.alt{letter-spacing:-.01em}
p strong,td.content strong,div.footnote strong{letter-spacing:-.005em}
p,blockquote,dt,td.content,span.alt{font-size:1.0625rem}
p{margin-bottom:1.25rem}
.sidebarblock p,.sidebarblock dt,.sidebarblock td.content,p.tableblock{font-size:1em}
.exampleblock>.content{background-color:#fffef7;border-color:#e0e0dc;-webkit-box-shadow:0 1px 4px #e0e0dc;box-shadow:0 1px 4px #e0e0dc}
.print-only{display:none!important}
@page{margin:1.25cm .75cm}
@media print{*{-webkit-box-shadow:none!important;box-shadow:none!important;text-shadow:none!important}
html{font-size:80%}
a{color:inherit!important;text-decoration:underline!important}
a.bare,a[href^="#"],a[href^="mailto:"]{text-decoration:none!important}
a[href^="http:"]:not(.bare)::after,a[href^="https:"]:not(.bare)::after{content:"(" attr(href) ")";display:inline-block;font-size:.875em;padding-left:.25em}
abbr[title]::after{content:" (" attr(title) ")"}
pre,blockquote,tr,img,object,svg{page-break-inside:avoid}
thead{display:table-header-group}
svg{max-width:100%}
p,blockquote,dt,td.content{font-size:1em;orphans:3;widows:3}
h2,h3,#toctitle,.sidebarblock>.content>.title{page-break-after:avoid}
#toc,.sidebarblock,.exampleblock>.content{background:none!important}
#toc{border-bottom:1px solid #dddddf!important;padding-bottom:0!important}
body.book #header{text-align:center}
body.book #header>h1:first-child{border:0!important;margin:2.5em 0 1em}
body.book #header .details{border:0!important;display:block;padding:0!important}
body.book #header .details span:first-child{margin-left:0!important}
body.book #header .details br{display:block}
body.book #header .details br+span::before{content:none!important}
body.book #toc{border:0!important;text-align:left!important;padding:0!important;margin:0!important}
body.book #toc,body.book #preamble,body.book h1.sect0,body.book .sect1>h2{page-break-before:always}
.listingblock code[data-lang]::before{display:block}
#footer{padding:0 .9375em}
.hide-on-print{display:none!important}
.print-only{display:block!important}
.hide-for-print{display:none!important}
.show-for-print{display:inherit!important}}
@media print,amzn-kf8{#header>h1:first-child{margin-top:1.25rem}
.sect1{padding:0!important}
.sect1+.sect1{border:0}
#footer{background:none}
#footer-text{color:rgba(0,0,0,.6);font-size:.9em}}
@media amzn-kf8{#header,#content,#footnotes,#footer{padding:0}}
</style>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
/* Stylesheet for CodeRay to match GitHub theme | MIT License | http://foundation.zurb.com */
/*pre.CodeRay {background-color:#f7f7f8;}*/
.CodeRay .line-numbers{border-right:1px solid #d8d8d8;padding:0 0.5em 0 .25em}
.CodeRay span.line-numbers{display:inline-block;margin-right:.5em;color:rgba(0,0,0,.3)}
.CodeRay .line-numbers strong{color:rgba(0,0,0,.4)}
table.CodeRay{border-collapse:separate;border-spacing:0;margin-bottom:0;border:0;background:none}
table.CodeRay td{vertical-align: top;line-height:1.45}
table.CodeRay td.line-numbers{text-align:right}
table.CodeRay td.line-numbers>pre{padding:0;color:rgba(0,0,0,.3)}
table.CodeRay td.code{padding:0 0 0 .5em}
table.CodeRay td.code>pre{padding:0}
.CodeRay .debug{color:#fff !important;background:#000080 !important}
.CodeRay .annotation{color:#007}
.CodeRay .attribute-name{color:#000080}
.CodeRay .attribute-value{color:#700}
.CodeRay .binary{color:#509}
.CodeRay .comment{color:#998;font-style:italic}
.CodeRay .char{color:#04d}
.CodeRay .char .content{color:#04d}
.CodeRay .char .delimiter{color:#039}
.CodeRay .class{color:#458;font-weight:bold}
.CodeRay .complex{color:#a08}
.CodeRay .constant,.CodeRay .predefined-constant{color:#008080}
.CodeRay .color{color:#099}
.CodeRay .class-variable{color:#369}
.CodeRay .decorator{color:#b0b}
.CodeRay .definition{color:#099}
.CodeRay .delimiter{color:#000}
.CodeRay .doc{color:#970}
.CodeRay .doctype{color:#34b}
.CodeRay .doc-string{color:#d42}
.CodeRay .escape{color:#666}
.CodeRay .entity{color:#800}
.CodeRay .error{color:#808}
.CodeRay .exception{color:inherit}
.CodeRay .filename{color:#099}
.CodeRay .function{color:#900;font-weight:bold}
.CodeRay .global-variable{color:#008080}
.CodeRay .hex{color:#058}
.CodeRay .integer,.CodeRay .float{color:#099}
.CodeRay .include{color:#555}
.CodeRay .inline{color:#000}
.CodeRay .inline .inline{background:#ccc}
.CodeRay .inline .inline .inline{background:#bbb}
.CodeRay .inline .inline-delimiter{color:#d14}
.CodeRay .inline-delimiter{color:#d14}
.CodeRay .important{color:#555;font-weight:bold}
.CodeRay .interpreted{color:#b2b}
.CodeRay .instance-variable{color:#008080}
.CodeRay .label{color:#970}
.CodeRay .local-variable{color:#963}
.CodeRay .octal{color:#40e}
.CodeRay .predefined{color:#369}
.CodeRay .preprocessor{color:#579}
.CodeRay .pseudo-class{color:#555}
.CodeRay .directive{font-weight:bold}
.CodeRay .type{font-weight:bold}
.CodeRay .predefined-type{color:inherit}
.CodeRay .reserved,.CodeRay .keyword {color:#000;font-weight:bold}
.CodeRay .key{color:#808}
.CodeRay .key .delimiter{color:#606}
.CodeRay .key .char{color:#80f}
.CodeRay .value{color:#088}
.CodeRay .regexp .delimiter{color:#808}
.CodeRay .regexp .content{color:#808}
.CodeRay .regexp .modifier{color:#808}
.CodeRay .regexp .char{color:#d14}
.CodeRay .regexp .function{color:#404;font-weight:bold}
.CodeRay .string{color:#d20}
.CodeRay .string .string .string{background:#ffd0d0}
.CodeRay .string .content{color:#d14}
.CodeRay .string .char{color:#d14}
.CodeRay .string .delimiter{color:#d14}
.CodeRay .shell{color:#d14}
.CodeRay .shell .delimiter{color:#d14}
.CodeRay .symbol{color:#990073}
.CodeRay .symbol .content{color:#a60}
.CodeRay .symbol .delimiter{color:#630}
.CodeRay .tag{color:#008080}
.CodeRay .tag-special{color:#d70}
.CodeRay .variable{color:#036}
.CodeRay .insert{background:#afa}
.CodeRay .delete{background:#faa}
.CodeRay .change{color:#aaf;background:#007}
.CodeRay .head{color:#f8f;background:#505}
.CodeRay .insert .insert{color:#080}
.CodeRay .delete .delete{color:#800}
.CodeRay .change .change{color:#66f}
.CodeRay .head .head{color:#f4f}
</style>
</head>
<body class="article toc2 toc-left">
<div id="header">
<h1>Mango User Guide</h1>
<div class="details">
<span id="author" class="author">GengoAI</span><br>
<span id="revnumber">version v1.1</span>
</div>
<div id="toc" class="toc2">
<div id="toctitle">Table of Contents</div>
<ul class="sectlevel1">
<li><a href="#_overview">1. Overview</a></li>
<li><a href="#_installation">2. Installation</a>
<ul class="sectlevel2">
<li><a href="#_dependencies">2.1. Dependencies</a>
<ul class="sectlevel3">
<li><a href="#_runtime">2.1.1. Runtime</a></li>
<li><a href="#_compile">2.1.2. Compile</a></li>
<li><a href="#_optional">2.1.3. Optional</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#collections">3. Collections</a>
<ul class="sectlevel2">
<li><a href="#_utility_classes">3.1. Utility Classes</a></li>
<li><a href="#_counters">3.2. Counters</a></li>
<li><a href="#_multimaps_and_tables">3.3. Multimaps and Tables</a></li>
<li><a href="#_trees">3.4. Trees</a></li>
<li><a href="#_graphs">3.5. Graphs</a></li>
<li><a href="#_caches">3.6. Caches</a></li>
<li><a href="#_key_value_stores">3.7. Key-Value Stores</a></li>
</ul>
</li>
<li><a href="#streams">4. Mango Streams</a>
<ul class="sectlevel2">
<li><a href="#_creating_a_stream">4.1. Creating a Stream</a></li>
<li><a href="#_accumulators">4.2. Accumulators</a></li>
<li><a href="#_working_with_streams">4.3. Working with Streams</a>
<ul class="sectlevel3">
<li><a href="#_distributed_streams_and_configuration">4.3.1. Distributed Streams and Configuration</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#reflection">5. Reflection, Casting, and Conversion</a>
<ul class="sectlevel2">
<li><a href="#_reflection">5.1. Reflection</a>
<ul class="sectlevel3">
<li><a href="#_fields_methods_and_constructors">5.1.1. Fields, Methods, and Constructors</a></li>
<li><a href="#_getting_a_class_from_its_name">5.1.2. Getting a class from its name</a></li>
<li><a href="#_type_vs_class">5.1.3. Type vs Class</a></li>
</ul>
</li>
<li><a href="#conversion">5.2. Type Conversion</a></li>
<li><a href="#_casting">5.3. Casting</a></li>
<li><a href="#beanmap">5.4. BeanMap</a></li>
</ul>
</li>
<li><a href="#_input_output">6. Input / Output</a>
<ul class="sectlevel2">
<li><a href="#_resources">6.1. Resources</a>
<ul class="sectlevel3">
<li><a href="#_reading">6.1.1. Reading</a></li>
<li><a href="#_writing">6.1.2. Writing</a></li>
</ul>
</li>
<li><a href="#_resource_monitoring">6.2. Resource Monitoring</a></li>
<li><a href="#_csv">6.3. CSV</a></li>
<li><a href="#_json">6.4. JSON</a></li>
<li><a href="#_specifications">6.5. Specifications</a></li>
</ul>
</li>
<li><a href="#_pseudo_language_extensions">7. Pseudo-Language Extensions</a>
<ul class="sectlevel2">
<li><a href="#_dynamic_enumerations">7.1. Dynamic Enumerations</a>
<ul class="sectlevel3">
<li><a href="#_generating_dynamic_enumerations">7.1.1. Generating Dynamic Enumerations</a></li>
<li><a href="#_defining_elements">7.1.2. Defining Elements</a></li>
</ul>
</li>
<li><a href="#_parameter_maps">7.2. Parameter Maps</a></li>
<li><a href="#_tuples">7.3. Tuples</a></li>
</ul>
</li>
<li><a href="#_parsing_framework">8. Parsing Framework</a></li>
<li><a href="#appframework">9. Application Framework</a>
<ul class="sectlevel2">
<li><a href="#cli">9.1. Command Line Parsing</a></li>
<li><a href="#config">9.2. Configuration</a>
<ul class="sectlevel3">
<li><a href="#_sections">9.2.1. Sections</a></li>
<li><a href="#_beans">9.2.2. Beans</a></li>
</ul>
</li>
<li><a href="#preload">9.3. Preloading Static Elements</a></li>
</ul>
</li>
<li><a href="#_helpful_utilities_classes_and_interfaces">10. Helpful Utilities, Classes, and Interfaces</a></li>
</ul>
</div>
</div>
<div id="content">
<div id="preamble">
<div class="sectionbody">
<div class="imageblock text-center">
<div class="content">
<img src="images/mango.png" alt="mango">
</div>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="images/gengoai.png" alt="gengoai" width="150px">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_overview"><a class="link" href="#_overview">1. Overview</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango is a roughly a set of utilities and data structures that make java more convenient to use (in particular for Natural Language Processing, Text Mining, and Machine Learning).
It is <a href="https://www.apache.org/licenses/LICENSE-2.0.txt">Apache 2.0</a> licensed allowing it to be used for whatever purpose.
Mango is similar to Guava, Apache Commons Lang, and Apache Commons Collections.
The main reasons for creating Mango and not relying on existing libraries are:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>These libaries (especially Guava) are widely used and often cause version conflicts.
They (Guava) often have breaking changes, which can cause can code to not work at all or as intended.
Shading jars is a possibility, but is not optimal.</p>
</li>
<li>
<p>Better control and integration into functionality not provided by this libaries.</p>
</li>
<li>
<p>Use of Java 8&#8217;s built-in functional interfaces without the need for unused classes.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In addition, Mango provides helpful concepts, such as a generic Resources and easily distributed Mango Streams, utilities for converting from one type to another, and an easier to use wrapper around Java&#8217;s reflection capabilities.
Finally, Mango has an intuitive Configuration and Application framework that makes it simple to get command line and gui applications up and running.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_installation"><a class="link" href="#_installation">2. Installation</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango requires Java 11 and is available via the maven central repository.</p>
</div>
<div class="paragraph">
<p><strong>Core Mango:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Special Mango Annotations like Preload:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-annoations<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>Swing Applications and Helpers:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-swing-ui<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="paragraph">
<p><strong>SQL framework:</strong></p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="xml"><span class="tag">&lt;dependency&gt;</span>
     <span class="tag">&lt;groupId&gt;</span>com.gengoai<span class="tag">&lt;/groupId&gt;</span>
     <span class="tag">&lt;artifactId&gt;</span>mango-sql<span class="tag">&lt;/artifactId&gt;</span>
     <span class="tag">&lt;version&gt;</span>1.1<span class="tag">&lt;/version&gt;</span>
<span class="tag">&lt;/dependency&gt;</span></code></pre>
</div>
</div>
<div class="sect2">
<h3 id="_dependencies"><a class="link" href="#_dependencies">2.1. Dependencies</a></h3>
<div class="sect3">
<h4 id="_runtime"><a class="link" href="#_runtime">2.1.1. Runtime</a></h4>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Library</strong></th>
<th class="tableblock halign-left valign-top"><strong>License</strong></th>
<th class="tableblock halign-left valign-top"><strong>URL</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">sqlite-jdbc (mango-sql)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/xerial/sqlite-jdbc" class="bare">https://github.com/xerial/sqlite-jdbc</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Jackson</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/FasterXML/jackson" class="bare">https://github.com/FasterXML/jackson</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">MapDB (1.0.9)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="http://www.mapdb.org/" class="bare">http://www.mapdb.org/</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">juniversalchardet</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">MPL</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://code.google.com/archive/p/juniversalchardet/" class="bare">https://code.google.com/archive/p/juniversalchardet/</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache Commons-Compress</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://commons.apache.org/proper/commons-compress/" class="bare">https://commons.apache.org/proper/commons-compress/</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">flatlaf (mang-swing-ui)</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://www.formdev.com/flatlaf/" class="bare">https://www.formdev.com/flatlaf/</a></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_compile"><a class="link" href="#_compile">2.1.2. Compile</a></h4>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Library</strong></th>
<th class="tableblock halign-left valign-top"><strong>License</strong></th>
<th class="tableblock halign-left valign-top"><strong>URL</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">metainf-services</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">MIT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://github.com/kohsuke/metainf-services" class="bare">https://github.com/kohsuke/metainf-services</a></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">lombok</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">MIT</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://projectlombok.org/" class="bare">https://projectlombok.org/</a></p></td>
</tr>
</tbody>
</table>
</div>
<div class="sect3">
<h4 id="_optional"><a class="link" href="#_optional">2.1.3. Optional</a></h4>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Library</strong></th>
<th class="tableblock halign-left valign-top"><strong>License</strong></th>
<th class="tableblock halign-left valign-top"><strong>URL</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache Spark</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Apache 2</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><a href="https://spark.apache.org/" class="bare">https://spark.apache.org/</a></p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="collections"><a class="link" href="#collections">3. Collections</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango provides a variety of useful custom collections and convenience methods for working with collections.
Some of the custom collections will be familiar to those who have used Guava or Apache Common Collections.
Mango provides custom implementations as to not rely on these 3rd party libraries that are often used and result in version conflicts.</p>
</div>
<div class="sect2">
<h3 id="_utility_classes"><a class="link" href="#_utility_classes">3.1. Utility Classes</a></h3>
<div class="paragraph">
<p>Mango provides utility classes for accessing and manipulating the base Java collections.
The following table lists the utility class for the given Java type.</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Java Type</strong></th>
<th class="tableblock halign-left valign-top"><strong>Mango Utility Class</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterable</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterables</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterator</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Iterators</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Collection</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Collect</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Stream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Streams</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>List</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Lists</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Set</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Sets</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Map</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Maps</code></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Array</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Arrays2</code></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>The utility classes provide methods for creating new instances and manipulating existing instances.
Methods used to create an instance of a given type are defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"> asTYPE(...) <i class="conum" data-value="1"></i><b>(1)</b>
 TYPEOf(...) <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Converts an existing Java util type into the defined <code>TYPE</code> of collection, e.g. <code>asArrayList(Iterable&lt;?&gt;)</code> will convert an <code>Iterable</code> into an <code>ArrayList</code>.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Creates a new instance of the defined <code>TYPE</code>, e.g. <code>hashSetOf(T&#8230;&#8203;)</code> will create a <code>HashSet</code> containing the given items.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Methods for manipulating collections varying based on type.
We refer the reader to the JavaDoc.</p>
</div>
</div>
<div class="sect2">
<h3 id="_counters"><a class="link" href="#_counters">3.2. Counters</a></h3>
<div class="paragraph">
<p>A counter is mapping from an <code>Object</code> to a <code>Double</code> where the double value represents a count.
A double value is used in case the value represents a normalized count.
Mango provides the <code>Counters</code> utility class for constructing new Counters.
Currently, Mango provides a <code>HashMapCounter</code> and a <code>ConcurrentHashMapCounter</code> implementation.</p>
</div>
<div class="paragraph">
<p>In addition to the standard Counters, Mango provides a <code>MultiCounter</code> which maps a tuple of objects to a value.
Mango provides the <code>MutliCounters</code> utility class for constructing new MultiCounters.
Currently, Mango provides a <code>HashMapMultiCounter</code> and a <code>ConcurrentHashMapMultiCounter</code> implementation.</p>
</div>
<div class="paragraph">
<p>Both Counters and MultiCounters provide numerous methods to manipulate and query the counts of the objects.
These methods include finding the top or bottom N items, filtering by key or value, and determining the minimum and maximum values and their associated objects.</p>
</div>
</div>
<div class="sect2">
<h3 id="_multimaps_and_tables"><a class="link" href="#_multimaps_and_tables">3.3. Multimaps and Tables</a></h3>
<div class="paragraph">
<p>A <code>Multimap</code> maps keys to multiple values.
They act as a <code>Map&lt;K, Collection&lt;V&gt;</code> where individual implementations specify the type of collection, e.g. List, Set, etc.
Mango currently provides Multimap implementations wrapping the following collection types:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>ArrayList</p>
</li>
<li>
<p>LinkedList</p>
</li>
<li>
<p>Set</p>
</li>
<li>
<p>LinkedHashSet</p>
</li>
<li>
<p>TreeSet</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In all cases the backing map used is a <code>HashMap</code>.</p>
</div>
<div class="paragraph">
<p>Multimaps provide views over the keys and values the same as a Java Map.
These views update the underlying Multimap when changed (e.g. items are deleted).
Please see the JavaDoc for the full list of methods available on Multimaps.</p>
</div>
<div class="paragraph">
<p>A table is a two-dimensional structure that associates a value with two keys (i.e. a row and column key).
A table maybe sparse, meaning not all cells contain values.
Methods on a table that work with rows and columns return Map views that when updated will be reflected in table.
Currently, Mango provides a single table implementation, <code>HashBasedTable</code>, which wraps Java&#8217;s HashMap.</p>
</div>
</div>
<div class="sect2">
<h3 id="_trees"><a class="link" href="#_trees">3.4. Trees</a></h3>
<div class="paragraph">
<p>Mango provides two tree-based datastructures.
The first is an <code>IntervalTree</code> which facilitates fast lookup of ranges including overlapping ranges.
Interval Trees are a Set-like object which take subclasses of <code>Span</code> as their values.
A <code>Span</code> defines a start and end range.
Interval tress provide similar methods to those on a <code>NaviagableSet</code> with an additional method <code>overlapping(Span)</code> which provides fast lookup of all Spans in the tree that overlap with the given span.</p>
</div>
<div class="paragraph">
<p>Mango also provides a basic <code>Trie</code> implementation that facilitates fast prefix lookups in strings.
The Trie implements the Map interface where the key is a String and the value can be defined per use.
The Trie class provides some useful methods for suggesting the most similar strings given a maximum edit distance and finding all matches of the keys in the Trie in a given String.</p>
</div>
</div>
<div class="sect2">
<h3 id="_graphs"><a class="link" href="#_graphs">3.5. Graphs</a></h3>
<div class="paragraph">
<p>Mango provides a basic graph data structure which is currently has one implementation backed by a <code>Table</code>.
Mango graphs can be defined as being directed or undirected by defining the <code>EdgeFactory</code> used by the graph.
A number of graph algorithms and traversal strategies are implemented including, breadth-fist and depth-first search, Dijkstra&#8217;s shortest path, and random walks.
Additionally, Mango provides implementations of connected components and Chinese Whispers for clustering.
Vertices can be scored by degree, Page Rank, and random walks using one the implementations of <code>VertexScorer</code>.
Finally, graphs can be written to json or GraphViz dot format and rendered using GraphViz.</p>
</div>
</div>
<div class="sect2">
<h3 id="_caches"><a class="link" href="#_caches">3.6. Caches</a></h3>
<div class="paragraph">
<p>Mango provides a basic set of in-memory Caches to speed up IO intensive processes.
The <code>Cache</code> interface is inspired by Guava&#8217;s Cache and has methods for getting, putting, and invalidating entries.
There are currently two implemenations of <code>Cache</code>: <code>LRUCache</code> which keeps the last <code>N</code> most recently used items and <code>AutoCalculatingLRUCache</code> which extends <code>LRUCache</code> to auto-calculate missing values.</p>
</div>
</div>
<div class="sect2">
<h3 id="_key_value_stores"><a class="link" href="#_key_value_stores">3.7. Key-Value Stores</a></h3>
<div class="paragraph">
<p>Mango provides a generic interface for key-value stores and provides in-memory and disk-backed versions.
A <code>KeyValueStore</code> defines a mapping from keys to values and extends the Java <code>Map</code> interface.
Additionally, a <code>NavigableKeyValueStore</code> is defined in Mango that extends the Java <code>NavigableMap</code> interface.</p>
</div>
<div class="paragraph">
<p>Connections to key-value stores are done through a <code>KeyValueStoreConnection</code> as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">KeyValueStoreConnection connection = KeyValueStoreConnection.parse(<span class="string"><span class="delimiter">&quot;</span><span class="content">kv:mem:people</span><span class="delimiter">&quot;</span></span>); <i class="conum" data-value="1"></i><b>(1)</b>
KeyValueStore&lt;<span class="predefined-type">String</span>, <span class="predefined-type">String</span>&gt; kvStore = connection.connect(); <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Connections are defined by parsing a <strong>specification</strong> string defining the store.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The <code>connect</code> method of the <code>KeyValueStoreConnection</code> provides an instance of a <code>KeyValueStore</code> or <code>NavigableKeyValueStore</code>.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>The key-value store specification is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">kv:(mem|disk):namespace::&lt;PATH&gt;?readOnly=(<span class="predefined-constant">true</span>|<span class="predefined-constant">false</span>)</code></pre>
</div>
</div>
<div class="paragraph">
<p>Where <code>mem</code> creates an in-memory key-value store and <code>disk</code> a disk-based key-value store.
The namespace defines the store name an allows multiple stores to be associated with a single file.
The path is only required for disk-based key-value stores and the <code>readOnly</code> parameter is optional denoting if the store is read only (this is false by default).</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="streams"><a class="link" href="#streams">4. Mango Streams</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango streams provide a common interface for working with and manipulating streams regardless of their backend implementation.
Currently, there are implementations that wrap Java&#8217;s <code>Stream</code> and Spark&#8217;s <code>RDD</code> classes.
Mango supports 3 types of streams:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Stream Class</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MStream&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A stream of generic objects <code>T</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MPairStream&lt;K,V&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A stream of key-value pairs.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MDoubleStream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A stream of double values.</p></td>
</tr>
</tbody>
</table>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Mango provides <code>Serializable</code> versions of the Java functional interfaces which are used in calls to Mango streams in order to allow a common interface between Java streams and Spark streams.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_creating_a_stream"><a class="link" href="#_creating_a_stream">4.1. Creating a Stream</a></h3>
<div class="paragraph">
<p>Streams are created through a <code>StreamingContext</code>.
A local streaming context is generated using <code>StreamingContext.local()</code> or through <code>StreamingContext.get(false)</code> whereas a distributed (Spark) contetext is retrieved by <code>StreamingContext.distributed()</code> or <code>StreamingContext.get(false)</code>.
Streaming contexts provide a variety of ways for creating an MStream, including the following:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 40%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Method</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>empty()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an empty MStream</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>doubleStream(double&#8230;&#8203;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MDoubleStream over the given values.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>doubleStream(DoubleStream)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MDoubleStream from the given Java double stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stream(T&#8230;&#8203;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MStream by converting the array into a List.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stream(Iterator&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MStream over the given Iterator by treating the iterator as an Iterable. Note that local MStreams are not reusable.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stream(Iterable&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MStream over the given Iterable. Note that if the Iterable can be iterated over multiple times, local MStreams will be reusable.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stream(Stream&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MStream over the given Stream. Note that if the Stream can be iterated over multiple times, local MStreams will be reusable.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>textFile(String)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates a new MStream where each element is a line in the resources (recursive) at the given location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>textFile(Resource)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates a new MStream where each element is a line in the resources (recursive) at the given location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>textFile(Resource, boolean)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates a new MStream where each element is the entire content of a resource (wholeFile = true) or a single line of the resource (wholeFile = False) and resources are gathered recursively from the given location.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>textFile(Resource, String)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates a new MStream where each element is a line in the resources (recursive) at the given location only reading files matching the given pattern.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pairStream(Collection&lt;Entry&lt;K,V&gt;&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MPairStream over the collection of key-value pairs.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pairStream(Map&lt;K,V&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MPairStream over the key-value pairs in the map.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>pairStream(Tuple2&lt;K,V&gt;&#8230;&#8203;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MPairStream over the array of key-value pairs.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Note that Mango also implements a reusable versions of Java&#8217;s Stream classes (Stream, IntStream, DoubleStream, and LongStream).
The reusable streams use a <code>Supplier</code> to provide the underlying stream.
Individual methods, i.e. <code>map</code> then create a new supplier where the return stream applies the given method.
Reusable streams can be created outside of MStreams using the <code>Streams</code> utility class.</p>
</div>
</div>
<div class="sect2">
<h3 id="_accumulators"><a class="link" href="#_accumulators">4.2. Accumulators</a></h3>
<div class="paragraph">
<p>An accumulator is a variable that can be used for aggregating values in a stream.
As with streams, accumulators are created using a streaming context, e.g. <code>StreamingContext.local().counterAccumulator()</code>.
Mango provides the following accumulator implementations:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Accumulator Class</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MCounterAccumulator&lt;T&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a Mango <code>Counter</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MDoubleAccumulator</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a double value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MLongAccumulator</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a long value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MMapAccumulator&lt;K,V&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a Java Map.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MStatisticsAccumulator</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a Mango <code>EnhancedDoubleStatistics</code> for recording a series of double values and calculating descriptive statistics.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MAccumulator&lt;List&lt;T&gt;&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a Java list.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MAccumulator&lt;Set&lt;T&gt;&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Accumulator wrapping a Java set.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Accumulators can have names associated with them, which will show up in the Spark interface.
Additional accumulators can be created by implementing the base <code>MAccumulator</code> interface.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Streams should only update / modify the value of an accumulator and not try to read the value.
While reading the value will work in local streams, distributed streams do not support reading.
Thus, to make your logic reusable across stream types it is best to not read the values.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_working_with_streams"><a class="link" href="#_working_with_streams">4.3. Working with Streams</a></h3>
<div class="paragraph">
<p>Working with Mango streams is very similar to working with Java streams.
The core operations are:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 40%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>map(SerializableFunction&lt;IN,OUT&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transforms the items in the stream using the supplied function.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>mapToDouble(SerializableToDoubleFunction&lt;IN&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Maps objects in this stream to double values</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>mapToPair(SerializableFunction&lt;IN,Map.Entry&lt;K,V&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transforms the MStream into a MPairStream by transforming individual items into tuples.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>flatMap(SerializableFunction&lt;IN,Stream&lt;OUT&gt;&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transforms the items in the stream to multiple items using the supplied function.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>flatMapToPair(SerializableFunction&lt;IN,Stream&lt;Map.Entry&lt;K,V&gt;&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Transforms the MStream into a MPairStream by transforming individual items into multiple tuples.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>filter(SerializablePredicate&lt;IN&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Filters the item in the MStream to only those for which the given Predicate evaluates to <code>true</code>.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>distinct()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Remove duplicate items from the stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>limit(long)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Limits the stream to the first given number of items.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>skip(long)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Skips the first given number of items in the stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>take(long)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Takes the first given number of items in the stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>intersection(MStream&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a new MStream containing the intersection of elements in this stream and the argument stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>union(MStream&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns a new MStream containing the union of elements in this stream and the argument stream.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Aggregation can be performed over streams using one of the following methods:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 40%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Operation</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>count()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Gets the total number of items in the stream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>countByValue()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Provides a count per item in the stream by performing a group by.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>fold(T, SerializableBinaryOperator&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Performs a reduction on the elements of this stream using the given binary operator and given initial value.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>groupBy(SerializableFunction&lt;IN,OUT&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Groups the items in the stream using the given function that maps objects to key values.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reduce(SerializableBinaryOperator&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Performs a reduction on the elements of this stream using the given binary operator.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>max()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the max item in the stream requiring that the items be comparable.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>max(SerializableComparator&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the max item in the stream using the given comparator to compare items.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>min()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the min item in the stream requiring that the items be comparable.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>min(SerializableComparator&lt;T&gt;)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns the min item in the stream using the given comparator to compare items.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Mango Streams can be converted to distrubted Spark streams by simplying calling <code>toDistributedStream</code>.
Similarly, a Java stream can be created using the method <code>javaStream</code>.</p>
</div>
<div class="sect3">
<h4 id="_distributed_streams_and_configuration"><a class="link" href="#_distributed_streams_and_configuration">4.3.1. Distributed Streams and Configuration</a></h4>
<div class="paragraph">
<p>Mango will automatically distribute the current configuration to the Spark worker nodes when using a distributed stream.
If for some reason the configuration is updated after the stream is created, you should call <code>updateConfig()</code> on the distributed stream to ensure it receives the changes in configuration.</p>
</div>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="reflection"><a class="link" href="#reflection">5. Reflection, Casting, and Conversion</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango provides a number of classes and utilities for performing reflection on objects and classes and casting or converting objects from type to another.
Mango can provide a programming style seen in less strict languages, such as Python, at the cost of extra overhead.
While not best practices, this programming style can be useful for prototyping, dealing with generics, or cases where the return type is unknown.
This programming style is encapsulated in the <code>Val</code> object, which represents an immutable value of possibly unknown (to us) type.
Take the following code snippet as example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//If for some reason we do not know the return type (e.g. it returns Object) we can wrap it in a Val</span>
Val v = Val.of(someRemoteCallThatCanReturnDifferentValues(....));

<span class="comment">//A method that can return mulitple different types can wrap their return value in a Val</span>
<span class="directive">public</span> Val computeValue(<span class="type">double</span> in, <span class="type">boolean</span> returnArray){
    <span class="keyword">if</span>( returnArray ){
      <span class="keyword">return</span> Val.of(<span class="keyword">new</span> <span class="type">double</span><span class="type">[]</span>{in});
    }
    <span class="keyword">return</span> Val.of(in);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The val class provides "is" methods for determining type, e.g. <code>isArray</code>, <code>isMap</code>, and <code>isPrimitiveArray</code>.
Additionally, you can the class information of the wrapped value using <code>getWrappedClass</code>.
Val, provides convenience methods for getting the wrapped value as a number of different types, e.g. <code>asString()</code>, <code>asInteger()</code>, and <code>asDoubleArray()</code>.
Additionally, a default value can be given to these methods in case the wrapped value is <code>null</code> or cannot be converted into the given type.
Convenience methods also exist for converting into collections and maps, e.g. <code>asSet(Type)</code> and <code>asMap(Class, Class)</code> where the supplied type information is used to convert the elements of the collection / map.
Each of these methods make a call to <code>as(Type)</code>, which attempts to <a href="#conversion">convert</a> the wrapped value into the target type returning <code>null</code> if the conversion fails.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
While Val can be very useful (e.g. as the value of Map) it can be hard to debug if something goes wrong and as such should be used only when needed or prototyping code.
</td>
</tr>
</table>
</div>
<div class="sect2">
<h3 id="_reflection"><a class="link" href="#_reflection">5.1. Reflection</a></h3>
<div class="paragraph">
<p>Mango aims to make using reflection a little easier.
Reflection in Mango starts with the <code>RBase</code> class which defines the base set of functionality for performing reflection on an object, class, method, field, or parameter.
This base set of functionality comes in the form of querying the annotations on the reflected item and conditionally performing some action based on the presence of an annotation.
The following figure illustrates the hierarchy of classes that defines the Java reflection wrappers.</p>
</div>
<div class="imageblock text-center">
<div class="content">
<img src="images/reflect-hierarchy.png" alt="reflect hierarchy" width="540" height="100px">
</div>
<div class="title">Figure 1. Hierarchy of classes for reflection.</div>
</div>
<div class="paragraph">
<p>The main entry point for working with reflection in Mango is the <code>Reflect</code> class.
Reflect is a wrapper around an object or class providing easy ways to access the methods, fields, constructors, and annotations on the object/class.
An instance is created using on of the static methods as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">// Reflecting on a class (we can only set / get / invoke static methods or create an instance)</span>
Reflect rc = Reflect.onClass(MyClass.class);

<span class="comment">// Reflecting on an object allows us to modify its fields and call its methods.</span>
Reflect ro = Reflect.onObject(myClassInstance);</code></pre>
</div>
</div>
<div class="paragraph">
<p>The Reflect instance respects scope by default.
This can be changed by allowing privileged access as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Allow privileged access</span>
ro.allowPrivilegedAccess();

<span class="comment">//Go back to normal non-privileged access</span>
ro.setIsPrivileged(<span class="predefined-constant">false</span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Privileged access will allow the protected and private elments of the object/class to be manipulated.</p>
</div>
<div class="paragraph">
<p>Once we have an instance of reflect we can query the object/class for its accessible fields as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Attempts to retrieve the value of a field called &quot;name&quot;, if it cannot it will check for a getter &quot;getName()&quot;</span>
<span class="predefined-type">String</span> name = ro.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//We can easily set the value of a field using the set method</span>
ro.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">name</span><span class="delimiter">&quot;</span></span>, name + <span class="string"><span class="delimiter">&quot;</span><span class="content">-Smith</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//Retrieves the RField for the given field name if it is accessible.</span>
RField ageField = ro.get(<span class="string"><span class="delimiter">&quot;</span><span class="content">age</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//Gets all accessible fields on the object</span>
<span class="predefined-type">List</span>&lt;RField&gt; allFields = ro.getFields();

<span class="comment">//Gets all accessible fields that are ints</span>
<span class="predefined-type">List</span>&lt;RField&gt; intFields = getFieldsWhere(f -&gt; f.getType().equals(<span class="type">int</span>.class));

<span class="comment">//Gets all accessible fields that have an annotation of MyAnnotation on them</span>
<span class="predefined-type">List</span>&lt;RField&gt; annotatedFields = getFieldsWithAnnotation(MyAnnotation.class);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, we can query the object/class for its accessible methods as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Retrieves the RMethod for the given method name if it is accessible.</span>
<span class="comment">//Note we are looking for a no-argument method</span>
RMethod calculateAge = ro.getMethod(<span class="string"><span class="delimiter">&quot;</span><span class="content">calculateAge</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//Retrieves the RMethod for the given method name with given parameter types if it is accessible.</span>
<span class="comment">//Note we are looking for a method named &quot;doSomethingImportant&quot; whose first argument is a String and second argument is an Integer.</span>
RMethod doSomethingImportant = ro.getMethod(<span class="string"><span class="delimiter">&quot;</span><span class="content">doSomethingImportant</span><span class="delimiter">&quot;</span></span>, <span class="predefined-type">String</span>.class, <span class="predefined-type">Integer</span>.class);

<span class="comment">//Gets all accessible methods</span>
<span class="predefined-type">List</span>&lt;RMethod&gt; allMethods = ro.getMethods();

<span class="comment">//Gets all accessible methods named &quot;update&quot;</span>
<span class="predefined-type">List</span>&lt;RMethod&gt; updateMethods = ro.getMethods(<span class="string"><span class="delimiter">&quot;</span><span class="content">update</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//Gets all accessible methods named &quot;update&quot; that matching the given criteria (have 2 parameters)</span>
<span class="predefined-type">List</span>&lt;RMethod&gt; updateStringMethods = ro.getFieldsWhere(<span class="string"><span class="delimiter">&quot;</span><span class="content">update</span><span class="delimiter">&quot;</span></span>, m -&gt; m.getParameterCount()==<span class="integer">2</span>);

<span class="comment">//Gets all accessible methods matching the given criteria (have 1 parameter)</span>
<span class="predefined-type">List</span>&lt;RMethod&gt; pseudoSetters = ro.getFieldsWhere(m -&gt; m.getParameterCount()==<span class="integer">1</span>);

<span class="comment">//Gets all accessible methods that have an annotation of MyAnnotation on them</span>
<span class="predefined-type">List</span>&lt;RMethod&gt; annotatedMethods = ro.getMethodsWithAnnotation(MyAnnotation.class);</code></pre>
</div>
</div>
<div class="paragraph">
<p>Similarly, we can query the object/class for its accessible constructors as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Retrieves the RConstructor whose first parameter is an Integer and second parameter is a String.</span>
RConstructor constructor = ro.getConstructor(<span class="predefined-type">Integer</span>.class, <span class="predefined-type">String</span>.class);</code></pre>
</div>
</div>
<div class="sect3">
<h4 id="_fields_methods_and_constructors"><a class="link" href="#_fields_methods_and_constructors">5.1.1. Fields, Methods, and Constructors</a></h4>
<div class="paragraph">
<p>The <code>RAccessibleBase</code> base class wrapps <code>AccessibleObject</code> providing a <code>process(CheckedFunction)</code> and <code>with(CheckedConsumer)</code> method which automatically take care of setting the privileges of the object.
<code>RField</code> implements the <code>RAccessibleBase</code> and wraps a Java <code>Field</code>.
The <code>RExecutable</code> is child class of <code>RAccessibleBase</code> that serves as a base class for reflected objects that can be "executed", e.g. Methods and Constructors.
The <code>RExecutable</code> also provides ways to examine the parameters (wrapped as <code>RParameter</code>) of the executable.
The <code>RMethod</code> and <code>RConstructor</code> classes provide methods for calling (i.e. invoking) the underlying method / constructor.</p>
</div>
</div>
<div class="sect3">
<h4 id="_getting_a_class_from_its_name"><a class="link" href="#_getting_a_class_from_its_name">5.1.2. Getting a class from its name</a></h4>
<div class="paragraph">
<p>The Reflect class provides two convenience static methods for getting a <code>Class</code> for the name represented in a String.
The methods support the detection of arrays where the name ends with  <code>[]</code> or starts with <code>[L</code> or just <code>[</code>.
Moreover, all classes in <code>java.lang</code>, <code>java.util</code>, and <code>com.gengoai</code> can be accessed by their simple name (e.g. ArrayList).
The following code example shows the usage:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Note this method will throw an Exception if the class is not found</span>
<span class="predefined-type">Class</span>&lt;?&gt; listClass = Reflect.getClassForName(<span class="string"><span class="delimiter">&quot;</span><span class="content">ArrayList</span><span class="delimiter">&quot;</span></span>);

<span class="comment">//This method will end up finding the class in com.gengoai.collection.counter.HashMapCounter</span>
<span class="comment">//Note that the &quot;Silently&quot; means it will return a null value if the class is not found instead of throwing an</span>
<span class="comment">//exception.</span>
<span class="predefined-type">Class</span>&lt;?&gt; counterClass = Reflect.getClassForNameSilently(<span class="string"><span class="delimiter">&quot;</span><span class="content">collection.counter.HashMapCounter</span><span class="delimiter">&quot;</span></span>)

<span class="comment">//int[].class</span>
<span class="predefined-type">Class</span>&lt;?&gt; tClass = Reflect.getClassForName(<span class="string"><span class="delimiter">&quot;</span><span class="content">int[]</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_type_vs_class"><a class="link" href="#_type_vs_class">5.1.3. Type vs Class</a></h4>
<div class="paragraph">
<p>In many places of Mango you will find methods that can type a Java <code>Type</code> or Java <code>Class</code>.
A <code>Class</code> is a <code>Type</code> in Java, but other type implementations can be useful for dealing with generics, i.e. <code>ParameterizedType</code>.
Thus, in most cases Mango will provide the option to use either a <code>Type</code> or <code>Class</code>.
Note that when calling a method using a <code>Type</code> you either need to add the parameter type to the method call or capture the return value in a variable.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> &lt;T&gt; T fromClass(<span class="predefined-type">Class</span>&lt;T&gt; type) { ... }
<span class="directive">public</span> <span class="directive">static</span> &lt;T&gt; T fromType(<span class="predefined-type">Type</span> type) { ... }

<span class="comment">// OK - the compiler can guess the return type</span>
<span class="predefined-type">System</span>.out.println(fromClass(<span class="predefined-type">Double</span>.class));
<span class="comment">// NOT OK - the compiler cannot guess the return type</span>
<span class="predefined-type">System</span>.out.println(fromType(...));</code></pre>
</div>
</div>
<div class="paragraph">
<p>Mango provides the <code>TypeUtils</code> class that contains useful methods for learning more about <code>Type</code> and converting them into <code>Class</code>.
Additionally, Mango provides the method:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="predefined-type">Type</span> parameterizedType(<span class="predefined-type">Type</span> rawType, <span class="predefined-type">Type</span>... typeArguments)</code></pre>
</div>
</div>
<div class="paragraph">
<p>to create <code>ParameterizedType</code> instances so that you can store / pass with generic information.
As a convienenc, there is a <code>parse(String)</code> method on <code>TypeUtils</code> that will parse a string representation of a parameterized or non-parameterized type, e.g. <code>List&lt;String&gt;</code> will be parsed into a <code>ParameterizedType</code> with the raw class of <code>List</code> and the type argument of <code>String</code>.
This allows you to specify generic types in your <a href="#config">configuration</a> files when defining types.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="conversion"><a class="link" href="#conversion">5.2. Type Conversion</a></h3>
<div class="paragraph">
<p>The core component of Mango&#8217;s <code>Val</code> class and <a href="#config">configuration</a> framework is the ability to convert any arbitrary type to another.
This conversion is done using the Mango <code>Converter</code> class, which utilizes a number of <code>TypeConverter</code> registered using Java&#8217;s Service Loader.
A <code>TypeConverter</code> defines the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"> <span class="predefined-type">Object</span> convert(<span class="predefined-type">Object</span> source, <span class="predefined-type">Type</span>... parameters) <span class="directive">throws</span> TypeConversionException; <i class="conum" data-value="1"></i><b>(1)</b>
 <span class="predefined-type">Class</span><span class="type">[]</span> getConversionType(); <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Defines the methodology to convert a <em>source</em> of any type with the following <code>Type</code> parameters (used for generics).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Defines the classes the converter implementation can convert into.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>When converting a source object we can us the following methods:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">Converter.convert(source, TARGET_TYPE); <i class="conum" data-value="1"></i><b>(1)</b>
Converter.convertSilently(source, TARGET_TYPE); <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>A <code>TypeConversionException</code> will be thrown if the source object cannot be converted into the target type (e.g. trying to convert an int into a Map).</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Returns a <code>null</code> value if the conversion fails.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Mango provides many type converters out of the box which cover core Java, java.util, and Mango types.
New type converters can be registered using Java&#8217;s Service loader.
We recommend using the <code>org.kohsuke.metainf-services</code> package to ease this process by only needing to add a <code>@MetaInfServices(value = TypeConverter.class)</code> annotation to your type converter class.</p>
</div>
</div>
<div class="sect2">
<h3 id="_casting"><a class="link" href="#_casting">5.3. Casting</a></h3>
<div class="paragraph">
<p>Mango provides the <code>Cast</code> class to easily cast an object.
It provides the following basic methods:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">static</span> &lt;T&gt; T as(<span class="predefined-type">Object</span> o) <i class="conum" data-value="1"></i><b>(1)</b>
<span class="directive">static</span> &lt;T&gt; T as(<span class="predefined-type">Object</span> o, <span class="predefined-type">Class</span>&lt;T&gt; clazz)  <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Casts an object to the desired return type throwing a <code>java.lang.ClassCastException</code> if the given object cannot be cast as the desired type.
This method uses an "unchecked" conversion.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Casts an object to a given type throwing a <code>java.lang.ClassCastException</code> if the given object cannot be cast as the desired type.
This method uses <code>Class.cast</code>.</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Additionally, there are methods for casting the elements of collections, iterables, iterators, and maps:
sahi2001</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">static</span> &lt;T&gt; <span class="predefined-type">Iterator</span>&lt;T&gt; cast(<span class="predefined-type">Iterator</span>&lt;?&gt; iterator)
<span class="directive">static</span> &lt;T&gt; <span class="predefined-type">Iterable</span>&lt;T&gt; cast(<span class="predefined-type">Iterable</span>&lt;?&gt; iterable);
<span class="directive">static</span> &lt;T&gt; <span class="predefined-type">Collection</span>&lt;T&gt; cast(<span class="predefined-type">Collection</span>&lt;?&gt; collection)
<span class="directive">static</span> &lt;T&gt; <span class="predefined-type">Set</span>&lt;T&gt; cast(<span class="predefined-type">Set</span>&lt;?&gt; set);
<span class="directive">static</span> &lt;T&gt; <span class="predefined-type">List</span>&lt;T&gt; cast(<span class="predefined-type">List</span>&lt;?&gt; list)
<span class="directive">static</span> &lt;K, V&gt; <span class="predefined-type">Map</span>&lt;K, V&gt; cast(<span class="predefined-type">Map</span>&lt;?, ?&gt; map)</code></pre>
</div>
</div>
<div class="paragraph">
<p>The methods listed above perform casting in lazy manner and do not change the underlying data.
These methods are most useful when passing an item as method parameter.</p>
</div>
</div>
<div class="sect2">
<h3 id="beanmap"><a class="link" href="#beanmap">5.4. BeanMap</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_input_output"><a class="link" href="#_input_output">6. Input / Output</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango provides classes for working with archive files, csv and json encoded streams, asynchronous and multi-file writers, and an abstraction around a "resource" which could be a file, url, string, etc.</p>
</div>
<div class="sect2">
<h3 id="_resources"><a class="link" href="#_resources">6.1. Resources</a></h3>
<div class="paragraph">
<p>A resource represents a source or destination of/for data.
It is similar in idea to Spring&#8217;s Resource class.
At the core a <code>Resource</code> object facilities opening the data source for reading (<code>InputStream</code> or <code>Reader</code>) and/or writing (<code>OutputStream</code> or <code>Writer</code>) and traversing and manipulating the structure of the data source (e.g. retrieving all children of a folder or the folder for a file, deleting an element, or adding new folders).</p>
</div>
<div class="paragraph">
<p>The following is a list of the supported resource types and whether they support being read from, written to, or traversed.</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 12.5%;">
<col style="width: 37.5%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Resource Type</strong></th>
<th class="tableblock halign-left valign-top"><strong>Readable</strong></th>
<th class="tableblock halign-left valign-top"><strong>Writeable</strong></th>
<th class="tableblock halign-left valign-top"><strong>Traversable</strong></th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ByteArrayResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps an expandable array of bytes for reading/writing.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ClasspathResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Points to a stream resource on the classpath.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>EmptyResource</code></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Special resource representing no content.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FileResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java File.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>InputStreamResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java InputStream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OutputStreamResource</code></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java OutputStream.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ReaderResource</code></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java Reader.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StdinResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps System.in.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StdoutResource</code></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps System.out</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StringResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java StringBuilder allowing reading and writing (by overwriting the value).</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>URIResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java URI.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>URLResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java URL.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>WriterResource</code></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java Writer.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ZipResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><span class="icon"><i class="fa fa-check"></i></span></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Wraps a Java ZipFile and ZipEntry allowing reading and traversal of a zip archive.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Resources are created by either using the constructor of one of the implementations or by using the <code>Resources</code> utlility class.
The main way of creating a resource is using <code>Resources.from(String)</code> where the given string defines the resource scheme.
Each scheme has an associated <code>ResourceProvider</code> which takes care of parsing the scheme and creating a Resource instance.
The scheme is in the following format: <code>PROTOCOL(?OPTIONS):PATH</code> where <code>OPTIONS</code> is optional.
For example a <code>FileResource</code> can specified using <code>file:/home/user/file.text</code>.
Common options include, the charset and compression technique and are set as follows: <code>file?compression=GZIP,charset=SJIS:/home/user/file.text</code>.
Note that options are set using a <a href="#beanmap">BeanMap</a> thus the valid options for each resource type are the setters on that type.</p>
</div>
<div class="paragraph">
<p>The following is a list of Schemes, the generated resource type, and what the path represents for those types accessible via <code>Resources.from(String)</code>:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Scheme</strong></th>
<th class="tableblock halign-left valign-top"><strong>ResourceType</strong></th>
<th class="tableblock halign-left valign-top"><strong>Path</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>bytes</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ByteArrayResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">A string which will be converted into bytes (empty is ok).</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>classpath</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ClasspathResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">the location of the resource found within in the default Classloader.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>file</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>FileResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">the location of the resource on a local disk.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stdin</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StdinResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">empty.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>stdout</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StdoutResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">empty.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>string</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>StringResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">the String representing the content of the resource (empty is ok).</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>http(s)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>URLResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">path of the url.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>zip</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>ZipResource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">the location on local disk where the zip file is located.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Note that for convenience you can leave off the scheme for file resources, e.g. <code>Resources.from("/home/user/test.csv")</code> will assume the given String is a <code>FileResource</code>.</p>
</div>
<div class="sect3">
<h4 id="_reading"><a class="link" href="#_reading">6.1.1. Reading</a></h4>
<div class="paragraph">
<p>A <code>Resource</code> implementation provides the following methods for reading:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Return Value</strong></th>
<th class="tableblock halign-left valign-top">Method</th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>boolean</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>canRead</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns <em>true</em> if the resource is readable, <em>false</em> if not.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>InputStream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>inputStream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Opens an input stream over this resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>MStream&lt;String&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>lines</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Creates an MStream (see <a href="#streams">Mang Streams</a>) over the lines in the resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>byte[]</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>readBytes</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reads the resource into an array of bytes.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Reader</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>reader</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">OOpens a reader using guessing the encoding and falling back to the default on the resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>List&lt;String&gt;</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>readLines</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reads the complete resource in as text breaking it into lines based on the newline character.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>T</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>readObject</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Deserializes an object from a resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>String</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>readToString</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reads the entire resource as a String.</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>One of the advantages of using a <code>Resource</code> is it will automatically determine the character set of the data source when reading (except <code>inputStream</code> and <code>readBytes</code>).
The default charset can set using the <code>setCharset</code> method.
Moreover, the resource will automatically determine if the underlying data is compressed in gzip or bzip2 format and handling it accordingly.</p>
</div>
</div>
<div class="sect3">
<h4 id="_writing"><a class="link" href="#_writing">6.1.2. Writing</a></h4>
<div class="paragraph">
<p>A <code>Resource</code> implementation provides the following methods for writing:</p>
</div>
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 20%;">
<col style="width: 20%;">
<col style="width: 60%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"><strong>Return Value</strong></th>
<th class="tableblock halign-left valign-top">Method</th>
<th class="tableblock halign-left valign-top"><strong>Description</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Resource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>append(String)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Appends the given string content to the resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Resource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>append(byte[])</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Appends the given byte array content to the resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>boolean</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>canWrite</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Returns <em>true</em> if the resource is writable, <em>false</em> if not.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>OutputStream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>outputStream</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Opens an output stream over this resource.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Resource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>write(byte[])</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Writes the given byte array to the resource overwriting any existing content.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Resource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>write(String)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Writes the given string to the resource overwriting any existing content.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Resource</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>writeObject(Object)</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Serializes an object to the resource using Java Serialization.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>Writer</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code>writer()</code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Opens a writer for writing to the resource.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_resource_monitoring"><a class="link" href="#_resource_monitoring">6.2. Resource Monitoring</a></h3>
<div class="paragraph">
<p>A common pitfall in Java is not properly closing resources.
This can become especially tricky when dealing with concurrency and the new Java stream framework.
Mango provides a <code>ResourceMonitor</code> which tracks <code>MonitoredObjects</code> and automatically closes (frees) them when they are no longer referenced.
The <code>ResourceMonitor</code> is basically a garbage collector for resources!</p>
</div>
<div class="paragraph">
<p>The <code>ResourceMonitor</code> class provides convenience methods for monitoring the most common types:</p>
</div>
<table class="tableblock frame-all grid-all stretch">
<colgroup>
<col style="width: 33.3333%;">
<col style="width: 33.3333%;">
<col style="width: 33.3334%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">SQL Connection</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">InputStream</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">OutputStream</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Reader</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Writer</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Stream&lt;T&gt;</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">MStream&lt;T&gt;</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">DoubleStream</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">IntStream</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">LongStream</p></td>
<td class="tableblock halign-left valign-top"></td>
<td class="tableblock halign-left valign-top"></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>Additionally, it provides a generic <code>monitor</code> method that takes an <code>Object</code> and returns a <code>MonitoredObject</code> wrapping the given object.
For generic Objects you can also specify a custom procedure to run when the resource is "closed" by passing in <code>Consumer&lt;T&gt;</code> that will free resources.
An example of creating a Monitored object from a custom class is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">MonitoredObject&lt;MyClass&gt; m = ResourceMonitor.monitor(<span class="keyword">new</span> MyClass(), mc -&gt; {
 <span class="comment">//special on-close stuff here</span>
});
<span class="predefined-type">System</span>.out.println(m.object.getValue());</code></pre>
</div>
</div>
<div class="paragraph">
<p>The object is wrapped in a <code>MonitoredObject</code> which is tracked by the resource monitor.
We have specified a custom on-close operation, which will be called when there are no other references to the wrapped <code>MyClass</code> object.
The wrapped object is accessed via the public field <code>object</code></p>
</div>
</div>
<div class="sect2">
<h3 id="_csv"><a class="link" href="#_csv">6.3. CSV</a></h3>
<div class="paragraph">
<p>Delimited Separated Value (DSV) files, where the delimiter is most commonly a comma or tab, are widely used data format for everything from finance to to-do lists.
Mango provides a reader, writer, and formatter for DSV which is configurable to match most standards.
The following code snippet illustrates how easy it is to read in a CSV file:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="keyword">try</span>( CSVReader reader = CSV.csv().reader(Resources.from(<span class="string"><span class="delimiter">&quot;</span><span class="content">/data/people.csv</span><span class="delimiter">&quot;</span></span>)) ){
  <span class="predefined-type">List</span>&lt;<span class="predefined-type">String</span>&gt; row;
  <span class="keyword">while</span>( (row = reader.nextRow()) != <span class="predefined-constant">null</span> ){
    <span class="predefined-type">System</span>.out.println(row);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The CSV format can be specified using fluent accessors on the <code>CSV</code> class.
A generic CSV and TSV format are accessible via <code>csv()</code> and <code>tsv()</code> respectively, but one can also call <code>builder()</code> which will use default values.
You can instruct the reader that the first line of a CSV file is the header by calling <code>hasHeader()</code> on your CSV object.
Alternatively, you can specify the header if one is not given in the file using <code>header(String&#8230;&#8203;)</code> or <code>header(List&lt;String&gt;)</code>.
When a header is specified you can iterate over the file using: <code>CSV.rowMapStream()</code> which will provide Java stream of <code>Map&lt;String,String&gt;</code>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_json"><a class="link" href="#_json">6.4. JSON</a></h3>
<div class="paragraph">
<p>Mango uses Jackson for handling JSON.
Mango provides a utility class <code>Json</code> to perform basic operations, such as serializing an object to a JSon string or to a resource and deserializing Json into an Object.
Additionally, Mango provides a <code>JsonEntry</code> class that wraps the Jackson Json classes allowing easy builder style approaches to constructing Json.</p>
</div>
</div>
<div class="sect2">
<h3 id="_specifications"><a class="link" href="#_specifications">6.5. Specifications</a></h3>
<div class="paragraph">
<p>The builder pattern is an excellent way to create Objects which have multiple parameters.
However, the builder pattern doesn&#8217;t help when we want to specify parameters via configuration or in a concise manner.
That is where Mango Specificatons come in handy.
A specification is a URI-like object defining a <code>Schema</code>, <code>Protocol</code>, <code>SubProtocols</code>, <code>Path</code>, and <code>Query Parameters</code> that define a resource, connection, etc.
The specification form is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">SCHEMA:(PROTOCOL(:SUB-PROTOCOL)*)?(::PATH)?(;query=value)</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example is <code>kv:mem:people</code> which defines an in-memory ke-value store with the namespace people.
The specifciation <code>kv:disk:people::~/people.db;readOnly=true</code> defines a disk-based key-value store with the namespace <em>people</em> stored at <code>~/people.db</code> and being accessed as read only.
Note that the Path and Query Arguments can will be resolved against the current Config allowing for dynamic paths like <code>${BASE_DIR}/myFile</code> for paths and <code>parameter=${parameter.defaultValue}</code> where <code>${BASE_DIR}</code> and <code>${parameter.defaultValue}</code> will be set via the Config.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pseudo_language_extensions"><a class="link" href="#_pseudo_language_extensions">7. Pseudo-Language Extensions</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>Mango provides a number of classes and utilities that act as extensions / enhancements to Java concepts.
We call these enhancements "pseudo-language extensions" as Java does not not provide an easy way of extending the language.
In many cases these extensions were created for specific use cases in the Hermes and Apollo libraries.</p>
</div>
<div class="sect2">
<h3 id="_dynamic_enumerations"><a class="link" href="#_dynamic_enumerations">7.1. Dynamic Enumerations</a></h3>
<div class="paragraph">
<p>Dynamic enumerations are an enum-like objects that can have elements defined at runtime.
Elements on a dynamic enumeration are singleton objects.
In most cases it is acceptable to use the <code>==</code> operator for checking equality.
There are two types of dynamic enumerations:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Flat enums - act in the same manner as Java enums</p>
</li>
<li>
<p>Hierarchical enums - each value is capable of having a single parent forming a tree structure with a single ROOT.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>Both flat and hierarchical enums are uniquely defined by the label used to make them.
Labels are restricted to only containing letters, digits, and underscores.
Further, all labels are normalized to uppercase.
Note that all labels should be unique within the dynamic enumeration.</p>
</div>
<div class="paragraph">
<p>Dynamic enumeration elements implement the  <code>Tag</code> interface, which defines the <code>name()</code>, <code>label()</code>, and <code>isInstance(Tag)</code> methods.
For flat enum elements these methods are all based on its normalized label, i.e. <code>name()</code> and <code>label()</code> return the normalized label and <code>isInstance(Tag)</code> checks that the given tag is of the same class and then checks for label name equality.
However, hierarchical enum elements are defined with a label and a parent.
Therefore, the <code>name()</code> method of hierarchical enum elements returns the full path from the ROOT (but not including the ROOT), e.g. if we have an element with label <code>ScienceTeacher</code> whose parent is <code>Teacher</code> which has ROOT as the parent, the name would be <code>Teacher$ScienceTeacher</code>.
The <code>isInstance(Tag)</code> method will travese the hierarchy, such that the method would return true if we ask if  <code>Teacher$ScienceTeacher</code> is an instance of <code>Teacher</code>.</p>
</div>
<div class="sect3">
<h4 id="_generating_dynamic_enumerations"><a class="link" href="#_generating_dynamic_enumerations">7.1.1. Generating Dynamic Enumerations</a></h4>
<div class="paragraph">
<p>The main method of the <code>EnumValue</code> class provides cli interface for bootstraping the creation of a dynamic enumeration.
Usage is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="bash"> java EnumValue --className=&lt;Name of Enum&gt; --packageName=&lt;Package to put the Class in&gt; --src=&lt;Source directory&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>The generated class will be placed in the provided source folder under the given package name.
Optionally, a <code>-t</code> parameter can be passed to the command line to generate a hierarchical enum.</p>
</div>
<div class="paragraph">
<p>Core to the definition of both flat and hierarchical enumerations are:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p><strong>Registry</strong> - The registry stores the defined elements.</p>
</li>
<li>
<p><strong>public static Collection&lt;Colors&gt; values()</strong> - Acts the same as the <code>values()</code> method on a Java enum.</p>
</li>
<li>
<p><strong>public static Colors valueOf(String name)</strong> - Acts the same as the <code>valueOf(String)</code> method on a Java enum.</p>
</li>
</ol>
</div>
<div class="paragraph">
<p>In addition, the following make method is defined for flat enumerations: <code>public static TYPE make(String name)</code>
The following make method is defined for hierarchical enumerations: <code>public static TYPE make(TYPE parent, String name)</code></p>
</div>
<div class="paragraph">
<p>The supplied methods should not be removed.
It is possible to update the logic to suit your needs, but removing the methods all together can result in problems.</p>
</div>
</div>
<div class="sect3">
<h4 id="_defining_elements"><a class="link" href="#_defining_elements">7.1.2. Defining Elements</a></h4>
<div class="paragraph">
<p>We can define elements by adding static final variables like the following for flat enumerations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> Colors RED = make(<span class="string"><span class="delimiter">&quot;</span><span class="content">RED</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> Colors BLUE = make(<span class="string"><span class="delimiter">&quot;</span><span class="content">BLUE</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>and the following for hierarchical enumerations:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">Entity</span> ANIMAL = make(ROOT,<span class="string"><span class="delimiter">&quot;</span><span class="content">ANIMAL</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> <span class="predefined-type">Entity</span> CANINE = make(ANIMAL,<span class="string"><span class="delimiter">&quot;</span><span class="content">CANINE</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>In the case of hierarchical dynamic enumerations or flat enumerations that require other information, it is useful to use the <a href="#preload">Preload</a> annotation on the class defining the elements.
This will ensure that the elements are initialized at startup when using the <a href="#appframework">Mango application</a>.</p>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_parameter_maps"><a class="link" href="#_parameter_maps">7.2. Parameter Maps</a></h3>
<div class="paragraph">
<p>Parameter maps are specialized maps that have predefined set of keys (parameters) where each key has an associated type and default value.
They are useful to simulate "named and default parameters" found in other languages like Python.
However, parameters defined in a parameter map are typed and will validate valeus of the correct type are being assigned.
Parameter maps are implemented using the <code>ParamMap</code> class.</p>
</div>
<div class="paragraph">
<p>In order to define a <code>ParamMap</code>, you must first define the parameters.
The first step is to construct a parameter definition (<code>ParameterDef</code>) that maps a parameter name to a type.
Parameter definitions can be used by multiple <code>ParamMap</code>.
To construct a <code>ParameterDef</code>, we use one of the static methods as such:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> ParameterDef&lt;<span class="predefined-type">String</span>&gt; STRING_PARAMETER = ParameterDef.strParam(<span class="string"><span class="delimiter">&quot;</span><span class="content">stringParameter</span><span class="delimiter">&quot;</span></span>);
<span class="directive">public</span> <span class="directive">static</span> <span class="directive">final</span> ParameterDef&lt;<span class="predefined-type">Boolean</span>&gt; BOOLEAN_PARAMETER = ParameterDef.boolParam(<span class="string"><span class="delimiter">&quot;</span><span class="content">booleanParameter</span><span class="delimiter">&quot;</span></span>);</code></pre>
</div>
</div>
<div class="paragraph">
<p>With the parameters defined, we can now create a parameter map.
Typically, you will want to subclass the <code>ParamMap</code> class setting its generic type to the class you are creating.
You will want to define a set of public final variables of type <code>Parameter</code> that will map a parameter definition to a value.
Each of the parameters has a default value associated with it, such that whenever the parameter map is used the calling method can be assured that a reasonable value for a parameter will be set.
The following example illustrates the definition of a <code>MyParameters</code> parameter map with two parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">MyParameters</span> <span class="directive">extends</span> ParamMap&lt;MyParameters&gt; {
 <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">String</span>&gt; stringParameter = parameter(STRING_PARAMETER, <span class="string"><span class="delimiter">&quot;</span><span class="content">DEFAULT</span><span class="delimiter">&quot;</span></span>);
 <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Boolean</span>&gt; booleanParameter = parameter(BOOLEAN_PARAMETER, <span class="predefined-constant">true</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now we can define methods that utilize our <code>MyParameters</code> class.
We can define the method to take a <code>MyParameters</code> object or to take a <code>Consumer</code>.
Examples of this are as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">void</span> myMethod(MyParameters parameters) {
    <span class="predefined-type">System</span>.out.println(parameters.&lt;<span class="predefined-type">String</span>&gt;get(STRING_PARAMETER));
    <span class="predefined-type">System</span>.out.println(parameters.&lt;<span class="predefined-type">Boolean</span>&gt;get(BOOLEAN_PARAMETER));
}

<span class="directive">public</span> <span class="type">void</span> myMethod2(Consumer&lt;MyParameters&gt; consumer) {
    myMethod(<span class="keyword">new</span> MyParameters().update(consumer));
}</code></pre>
</div>
</div>
<div class="paragraph">
<p><code>ParamMap</code> have fluent accessors, so that we when using them as the argument to <code>myMethod</code>, we can do the following:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod(<span class="keyword">new</span> MyParameters().set(STRING_PARAMETER, <span class="string"><span class="delimiter">&quot;</span><span class="content">Set</span><span class="delimiter">&quot;</span></span>)
                           .set(BOOLEAN_PARAMETER, <span class="predefined-constant">false</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>We can also use the public fields directly:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod(<span class="keyword">new</span> MyParameters().stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">SET</span><span class="delimiter">&quot;</span></span>)
                           .booleanParameter.set(<span class="predefined-constant">false</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>The <code>myMethod2</code> illustrates how we can mimic named parameters using `Consumer`s.
Whe can call the method in the following manner:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod2(<span class="error">$</span> -&gt; {
  <span class="error">$</span>.stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>);
  <span class="error">$</span>.booleanParameter.set(<span class="predefined-constant">true</span>);
});

<span class="comment">//Or via fluent accessors</span>
myMethod2(<span class="error">$</span> -&gt; <span class="error">$</span>.stringParameter.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>)
                .booleanParameter.set(<span class="predefined-constant">true</span>));</code></pre>
</div>
</div>
<div class="paragraph">
<p>In addition to using the public variable, we can also set a parameter&#8217;s value using its name as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">myMethod2(p -&gt; {
  p.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">stringParameter</span><span class="delimiter">&quot;</span></span>, <span class="string"><span class="delimiter">&quot;</span><span class="content">Now is the time</span><span class="delimiter">&quot;</span></span>);
  p.set(<span class="string"><span class="delimiter">&quot;</span><span class="content">booleanParameter</span><span class="delimiter">&quot;</span></span>, <span class="predefined-constant">true</span>);
});</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can use inheritance to specialize your parameter maps, for example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="directive">abstract</span> <span class="type">class</span> <span class="class">BaseParameters</span>&lt;V <span class="directive">extends</span> BaseParameters&lt;V&gt; <span class="directive">extends</span> ParamMap&lt;V&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; iterations = parameter(ITERATIONS, <span class="integer">100</span>);
}

<span class="directive">public</span> <span class="type">class</span> <span class="class">ClusterParameters</span> <span class="directive">extends</span> BaseParameters&lt;ClusterParameters&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; K = parameter(K, <span class="integer">2</span>);
}

<span class="directive">public</span> <span class="type">class</span> <span class="class">ClassifierParameters</span> <span class="directive">extends</span> BaseParameters&lt;ClassifierParameters&gt; {
    <span class="directive">public</span> <span class="directive">final</span> Parameter&lt;<span class="predefined-type">Integer</span>&gt; labelSize = parameter(LABEL_SIZE, <span class="integer">2</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Creates an abstract base parameter class (<code>BaseParameters</code>) which defines common parameters (<code>iterations</code>).
Child classes (<code>ClusterParameters</code> and <code>ClassifierParameters</code>) then can add parameters specific to their use case.
We can then construct a method which takes the <code>BaseParameters</code>, e.g. <code>train(BaseParameters&lt;?&gt; parameters)</code> which we during invocation we can send the correct set of parameters.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="comment">//Option 1 use the as method</span>
<span class="directive">public</span> <span class="type">void</span> train(BaseParameters&lt;?&gt; parameters) {
    ClassifierParameters cParameters = parameters.as(ClassifierParameters.class);
    <span class="type">int</span> iterations = cParameters.get(ITERATIONS);
    <span class="type">int</span> labelSize = cParameters.get(LABEL_SIZE);
}

<span class="comment">//Option 2 use the getOrDefault methods</span>
<span class="directive">public</span> <span class="type">void</span> train(BaseParameters&lt;?&gt; parameters) {
    <span class="type">int</span> iterations = parameters.get(ITERATIONS);
    <span class="type">int</span> labelSize = parameters.getOrDefault(LABEL_SIZE,<span class="integer">2</span>);
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>When using the <code>BaseParameters</code> class we can cast the class to the correct instance type (e.g. <code>ClassifierParameters</code>) as shown in option 1 or use the <code>getOrDefault</code> methods on the <code>ParamMap</code> as shown in option2.</p>
</div>
</div>
<div class="sect2">
<h3 id="_tuples"><a class="link" href="#_tuples">7.3. Tuples</a></h3>
<div class="paragraph">
<p>A tuple is a finite sequence of items.
Mango provides specific implementations for degree 0-4 tuples, which all each element&#8217;s type to be defined via generics.
For tuples with degree 5 or more, a generic <code>NTuple</code> is provided.</p>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_parsing_framework"><a class="link" href="#_parsing_framework">8. Parsing Framework</a></h2>
<div class="sectionbody">

</div>
</div>
<div class="sect1">
<h2 id="appframework"><a class="link" href="#appframework">9. Application Framework</a></h2>
<div class="sectionbody">
<div class="paragraph">
<p>The application framework takes away much of the boilerplate in creating a command line or gui application, such as initializing configuration and command line parsing.
Application has three abstract implementations: <code>CommandLineApplication</code>  and <code>SwingApplication</code> (mango-swing).
While Similar there are small differences in the use of these classes.</p>
</div>
<div class="paragraph">
<p>The following is an example of a command line application:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Application</span>.Description(<span class="string"><span class="delimiter">&quot;</span><span class="content">My application example</span><span class="delimiter">&quot;</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">MyApplication</span> <span class="directive">extends</span> CommandLineApplication {

  <span class="annotation">@Option</span>(description = <span class="string"><span class="delimiter">&quot;</span><span class="content">The user name</span><span class="delimiter">&quot;</span></span>, required = <span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">n</span><span class="delimiter">&quot;</span></span>} )
  <span class="predefined-type">String</span> userName

  <span class="annotation">@Option</span>(name=<span class="string"><span class="delimiter">&quot;</span><span class="content">age</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The user age</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>})
  <span class="type">int</span> userAge

  <span class="annotation">@Override</span>
  <span class="directive">protected</span> <span class="type">void</span> programLogic() <span class="directive">throws</span> <span class="exception">Exception</span> {
        <span class="predefined-type">System</span>.out.println(<span class="string"><span class="delimiter">&quot;</span><span class="content">Hello </span><span class="delimiter">&quot;</span></span> + userName + <span class="string"><span class="delimiter">&quot;</span><span class="content">! You are </span><span class="delimiter">&quot;</span></span> + userAge + <span class="string"><span class="delimiter">&quot;</span><span class="content"> years old!</span><span class="delimiter">&quot;</span></span>);
  }

  <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
    <span class="keyword">new</span> MyApplication.run(args);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The sample MyApplication class extends the <code>CommandLineApplication</code> class.
Command line applications implement their logic in the programLogic method and should have the <code>run(args[])</code> method called in the main method.
The super class takes care of converting command line arguments into local fields on MyApplication using the <code>@Option</code> annotation (for information on the specification see <a href="#cli">Command Line Parsing</a>).
<code>@Option</code> annotations that do not have a name set use the field name as the command line option (e.g. <code>--userName</code> in the example above).
In addition, the global ''Config'' (see <a href="#config">Configuration</a> for more information) instance is initialized using default configuration file associated with the package of the application.
By default the application name is set to the class name.
Note: the application name and associated default config package can be specified via a constructor by calling super.</p>
</div>
<div class="paragraph">
<p>A simple Swing application is defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="annotation">@Application</span>.Description(<span class="string"><span class="delimiter">&quot;</span><span class="content">My application example</span><span class="delimiter">&quot;</span></span>)
<span class="directive">public</span> <span class="type">class</span> <span class="class">MySwingApplication</span> <span class="directive">extends</span> SwingApplication {

  <span class="annotation">@Option</span>(description = <span class="string"><span class="delimiter">&quot;</span><span class="content">The user name</span><span class="delimiter">&quot;</span></span>, required = <span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">n</span><span class="delimiter">&quot;</span></span>} )
  <span class="predefined-type">String</span> userName

  <span class="annotation">@Option</span>(name=<span class="string"><span class="delimiter">&quot;</span><span class="content">age</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The user age</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span> aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">a</span><span class="delimiter">&quot;</span></span>})
  <span class="type">int</span> userAge

  <span class="annotation">@Override</span>
  <span class="directive">public</span> <span class="type">void</span> setup() {
    <span class="comment">//prepare your GUI</span>
  }

  <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
    <span class="keyword">new</span> MySwingApplication.run(args);
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Swing applications require the <code>mango-swing</code> libreary.</p>
</div>
<div class="sect2">
<h3 id="cli"><a class="link" href="#cli">9.1. Command Line Parsing</a></h3>
<div class="paragraph">
<p>Mango provides a posix-like command line parser that is capable of handling non-specified arguments.
Command line arguments can be specified manually adding by adding a <code>NamedOption</code> via the <code>addOption(NamedOption)</code> method or automatically based on fields with <code>@Option</code> annotations by setting the parser&#8217;s <code>owner</code> object via the constructor.
The parser accepts long (e.g. <code>--longOption</code>) and short (e.g. <code>-s</code>) arguments.
Multiple short (e.g. single character) arguments can be specified at one time (e.g. <code>-xzf</code> would set the x, z, and f options to true).
Short arguments may have values (e.g. <code>-f FILENAME</code>).
Long arguments whose values are not defined as being boolean require their value to be set.
Boolean valued long arguments can specified without the true/false value.
All parsers will have help (<code>-h</code> or <code>--help</code>), config (<code>--config</code>), and explain config (<code>--config-explain</code>) options added automatically.&gt;</p>
</div>
<div class="paragraph">
<p>Values for options will be specified on the corresponding <code>NamedOption</code> instance.
The value can be retrieved either directly from the <code>NamedOption</code> or by using the <code>get(String)</code> method.
Argument names need not specify the <code>--</code> or <code>-</code> prefix.</p>
</div>
<div class="paragraph">
<p>An example of manually building a CommandLineParser is listed below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java">CommandLineParser parser = <span class="keyword">new</span> CommandLineParser();
parser.addOption(NamedOption.builder()
                               .name(<span class="string"><span class="delimiter">&quot;</span><span class="content">arg1</span><span class="delimiter">&quot;</span></span>)
                               .description(<span class="string"><span class="delimiter">&quot;</span><span class="content">dummy</span><span class="delimiter">&quot;</span></span>)
                               .required(<span class="predefined-constant">true</span>)
                               .type(<span class="predefined-type">String</span>.class)
                               .build()
                   );
<span class="predefined-type">String</span><span class="type">[]</span> notParsed = parser.parse(args)</code></pre>
</div>
</div>
<div class="paragraph">
<p>An example of using fields to define your command line arguments is as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code data-lang="java"><span class="directive">public</span> <span class="type">class</span> <span class="class">MyMain</span> {

        <span class="annotation">@Option</span>(description=<span class="string"><span class="delimiter">&quot;</span><span class="content">The input file</span><span class="delimiter">&quot;</span></span>, required=<span class="predefined-constant">true</span>, aliases={<span class="string"><span class="delimiter">&quot;</span><span class="content">i</span><span class="delimiter">&quot;</span></span>})
        <span class="predefined-type">String</span> input;

        <span class="annotation">@Option</span>(name =<span class="string"><span class="delimiter">&quot;</span><span class="content">l</span><span class="delimiter">&quot;</span></span>, description=<span class="string"><span class="delimiter">&quot;</span><span class="content">Convert input to lowercase</span><span class="delimiter">&quot;</span></span>, <span class="keyword">default</span>=<span class="string"><span class="delimiter">&quot;</span><span class="content">false</span><span class="delimiter">&quot;</span></span>)
        <span class="type">boolean</span> lowerCase;

        <span class="directive">public</span> <span class="directive">static</span> <span class="type">void</span> main(<span class="predefined-type">String</span><span class="type">[]</span> args){
                MyMain app = <span class="keyword">new</span> MyMain();
                CommandLineParser parser = <span class="keyword">new</span> CommandLineParser(app);
        }

}</code></pre>
</div>
</div>
</div>
<div class="sect2">
<h3 id="config"><a class="link" href="#config">9.2. Configuration</a></h3>
<div class="paragraph">
<p>The configuration format is a mix between json and java properties format.
The need to know features are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The global Config object accesses properties from config files, the command line, and environment variables</p>
</li>
<li>
<p>Comments with <code>#</code></p>
</li>
<li>
<p>Property names can be a combination of letters, digits, ".", and "_"</p>
</li>
<li>
<p>Properties and their values are separated using = or :</p>
</li>
<li>
<p>Property values can be referenced using <code>${propertyName}</code></p>
</li>
<li>
<p>Beans can be referenced using <code>@{beanName}</code></p>
</li>
<li>
<p>Properties can be appended to using <code>+=</code></p>
</li>
<li>
<p>The <code>\</code> is used to escape characters in property value (especially useful for whitespace at the beginning of a value)</p>
</li>
<li>
<p>The <code>\</code> at the end of a line with no spaces after it indicates a multiline property value (Same as java properties)</p>
</li>
<li>
<p>Other config files can be imported using @import for example <code>@import com/mycompany/myapp/myconf.conf</code> by default the resource is considered to be a classpath resource</p>
</li>
</ul>
</div>
<div class="sect3">
<h4 id="_sections"><a class="link" href="#_sections">9.2.1. Sections</a></h4>
<div class="paragraph">
<p>Sections avoid the need to retype the same prefix multiple times.
For example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>remote {
   apis {
	  search = google
	  translate = bing
	}
   storage {
   	 text = s3
   	 search = solr
   }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>would equate to the following individual properties being set:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>tools.api.search = google
tools.api.translate = bing
tools.storage.text = s3
tools.storage.search = solr</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_beans"><a class="link" href="#_beans">9.2.2. Beans</a></h4>
<div class="paragraph">
<p>Beans can be defined as follows:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="CodeRay highlight"><code>ParentJohn {
    singleton=true
    class=com.mycompany.app.Parent
    constructor {
       param1 {
         type  = String
         value = John
       }
       param2 {
         type = String[]
         value = Same,Ryan,Billy
       }
    }
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect2">
<h3 id="preload"><a class="link" href="#preload">9.3. Preloading Static Elements</a></h3>

</div>
</div>
</div>
<div class="sect1">
<h2 id="_helpful_utilities_classes_and_interfaces"><a class="link" href="#_helpful_utilities_classes_and_interfaces">10. Helpful Utilities, Classes, and Interfaces</a></h2>
<div class="sectionbody">
<table class="tableblock frame-all grid-rows stripes-odd stretch">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Copyable</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">The Copyable interface defines a method for returning a copy of an object.
Individual implementations are left to determine if the copy is deep or shallow.
However, a preference is for deep copies.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>EncryptionMethod</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Convenience methods for encryption with common algorithms.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Language</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Enumeration of world languages with helpful information on whether or not the language is Whitespace delimited or if language is read right to left (May not be complete)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Stopwatch</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tracks start and ending times to determine total time taken.
(Not Thread Safe)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>MultithreadedStopwatch</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Tracks start and ending times to determine total time taken.
(Thread Safe)</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Interner</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Mimics <code>String.intern()</code> with any object using heap memory.
Uses weak references so that objects no longer in memory can be reclaimed.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Lazy</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Lazily create a value in a thread safe manner.</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock"><code><strong>Validation</strong></code></p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">Convenience methods for validating method arguments.</p></td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<div id="footer">
<div id="footer-text">
Version v1.1<br>
Last updated 2020-07-28 11:56:43 -0500
</div>
</div>
</body>
</html>