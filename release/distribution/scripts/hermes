#!/bin/bash

SCRIPT_DIR=$(dirname "${BASH_SOUCE}")

if [[ "$SCRIPT_DIR" == "." ]]; then
  WORK_DIR=$(pwd)
else
  WORK_DIR=$(dirname "$(cd "$(dirname "${BASH_SOURCE}")" >/dev/null 2>&1 && pwd)")
fi

CLASSPATH='lib/*'

SAVEIFS=$IFS
IFS=$(echo -en "\n\b")
PROGRAMS=(
  "corpus" "com.gengoai.hermes.tools.CorpusApp" "Application for working with corpora."
  "tagger" "com.gengoai.hermes.tools.TaggerApp" "Application for training sequence taggers."
  "newscrawler" "com.gengoai.news.Crawler" "Application for crawling news articles."
  "news-corpus-creator" "com.gengoai.news.CorpusCreator" "Application for creating a corpus from crawled news articles."
  "gui" "com.gengoai.hermes.tools.swing.gui.Hermes" "View Documents in a Corpus"
  "conll-gui" "com.gengoai.hermes.tools.swing.conll.CoNLLEditor" "Annotate CoNLL formatted documents for one or more given tasks using a Swing-based gui."
  "lexicon-gui" "com.gengoai.hermes.tools.swing.LexiconEditor" "Edit a lexicon using a Swing-based gui."
  "workflow" "com.gengoai.hermes.tools.WorkflowApp" "Application to run user defined workflows."
  "workflow-actions" "com.gengoai.hermes.tools.ListWorkflowActions" "List available workflow actions."
)
IFS=$SAVEIFS

function get_class() {
  hash_lookup "$1" "class"
}

function list_applications() {
  echo "============================================================================"
  echo "                       Applications available to run"
  echo "============================================================================"
  for ((i = 0; i < ${#PROGRAMS[@]}; i += 3)); do
    cmd=${PROGRAMS[$i]}
    class=${PROGRAMS[$i + 1]}
    description=${PROGRAMS[$i + 2]}
    echo "$cmd: $description"
  done
}

function hash_lookup() {
  for ((i = 0; i < ${#PROGRAMS[@]}; i += 3)); do
    cmd=${PROGRAMS[$i]}
    class=${PROGRAMS[$i + 1]}
    help=${PROGRAMS[$i + 2]}
    if [[ $cmd == "$1" ]]; then
      if [[ "$2" == "class" ]]; then
        echo "$class"
      else
        echo "$help"
      fi
      return
    fi
  done
  echo "$1"
}

if [ -z "$JAVA_OPTS" ]; then
  JAVA_OPTS="-Xmx8g"
fi

if [ -z "$HERMES_CONFIG" ]; then
  HERMES_CONFIG="$WORK_DIR/config.conf"
fi

if [ -z "$SPARK_HOME" ]; then
  SPARK_HOME="$WORK_DIR/spark/"
fi

function help() {
  echo "Hermes CLI"
  echo "========================================================="
  echo "Usage: ./hermes (spark|spark-local) COMMAND [OPTIONS]"
  echo "========================================================="
  echo "Environment Variables"
  echo "---------------------------------------------------------"
  echo "JAVA_OPTS         JVM options (default -Xmx8g)"
  echo "HERMES_CONFIG     Custom config (default config.conf)"
  echo "SPARK_HOME        Spark install (default WORK_DIR/spark)"
  echo "---------------------------------------------------------"
  echo "Commands"
  echo "---------------------------------------------------------"
  echo "list, -ls, --ls         List available programs"
  echo "spark PROGRAM           Run program on spark cluster"
  echo "spark-local PROGRAM     Run program in local spark"
  echo "PROGRAM                 Run program in (no spark)"
  echo "help, -h, --help        Show this help"
  echo "---------------------------------------------------------"
}

ACTION=$(echo "$1" | tr A-Z a-z)

case $ACTION in
list | -ls | --ls)
  list_applications
  exit
  ;;
spark)
  PROGRAM=$(echo "$2" | tr A-Z a-z)
  PROGRAM=$(get_class "$PROGRAM")
  echo "Not Supported"
  ;;
spark-local)
  PROGRAM=$(echo "$2" | tr A-Z a-z)
  PROGRAM=$(get_class "$PROGRAM")
  java "$JAVA_OPTS" -cp "$CLASSPATH:spark/*" "$PROGRAM" "${@:2}" --config "$HERMES_CONFIG"
  ;;
help | -h | --help)
  help
  ;;
*)
  PROGRAM=$(get_class "$ACTION")
  java "$JAVA_OPTS" -cp "$CLASSPATH" "$PROGRAM" "${@:2}" --config "$HERMES_CONFIG"
  ;;
esac
